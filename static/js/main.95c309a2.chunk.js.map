{"version":3,"sources":["components/Content/Profile/ProfileInfo/ProfileDescription/FullInfo/FullInfo.module.scss","components/Content/Profile/ProfileInfo/ProfileDescription/ProfileDescription.module.scss","SuperComponents/c2-SuperButton/SuperButton.module.scss","components/Content/Messages/Dialog/ListMessage/MessageItemStyle.module.scss","components/Content/Profile/ProfileInfo/ProfilePhoto/ProfilePhoto.module.scss","components/Content/Profile/ProfileInfo/ProfileDescription/ProfileStatus/StatusWithoutEdit/StatusWithoutEdit.module.scss","components/Content/Login/LoginStyle.module.scss","components/Header/HeaderStyle.module.scss","components/Content/Messages/Users/Users.module.scss","components/Content/Messages/Users/UserItem/UserItemStyle.module.scss","components/Content/Messages/Dialog/DialogStyle.module.scss","components/Content/Messages/MessagesStyle.module.scss","components/Content/Profile/ProfileInfo/ProfileDescription/EditProfileForm/EditProfuleForm.module.scss","components/Content/Profile/ProfileInfo/ProfileInfo.module.scss","API/api.tsx","components/Redux/authReducer.tsx","img/user/user.png","components/Header/Header.tsx","components/Redux/profileReducer.tsx","components/Header/HeaderContainer.tsx","components/Navigation/Navigation.tsx","components/Redux/messagesReducer.tsx","components/Content/Messages/Users/UserItem/UserItem.tsx","components/Content/Messages/Users/Users.tsx","components/Content/Messages/Dialog/ListMessage/MessageItem.tsx","components/Content/Messages/Dialog/ListMessage/ListMessages.tsx","components/Content/Messages/Dialog/AddMessageForm/AddMessageForm.tsx","components/Content/Messages/Dialog/Dialog.tsx","components/Content/Messages/Messages.tsx","hoc/withAuthRedirect.tsx","components/Content/Messages/MessagesContainer.tsx","components/Content/Friends/FriendsTitle/FriendsTitle.tsx","components/Content/Friends/FriendFilter/FriendsFilter.tsx","components/Redux/friendsReducer.tsx","components/Content/Friends/FriendsList/FriendsItem/FriendsItem.tsx","components/Preloader/Preloader.tsx","components/Content/Friends/FriendsList/FriendsItem/PagesSwitcher.tsx","components/Content/Friends/FriendsList/FriendList.tsx","components/Content/Friends/FriendsList/FriendListContainer.tsx","components/Content/Friends/Friends.tsx","components/Content/Profile/ProfileInfo/ProfilePhoto/ProfilePhoto.tsx","components/Content/Profile/ProfileInfo/ProfileDescription/ProfileStatus/StatusWithoutEdit/StatusWithoutEdit.tsx","components/Content/Profile/ProfileInfo/ProfileDescription/ProfileStatus/StatusWithEditMode/StatusWithEditMode.tsx","components/Content/Profile/ProfileInfo/ProfileDescription/ProfileStatus/ProfileStatus.tsx","components/Content/Profile/ProfileInfo/ProfileDescription/FullInfo/FullInfo.tsx","components/Content/Profile/ProfileInfo/ProfileDescription/EditProfileForm/EditContactsForm.tsx","components/Content/Profile/ProfileInfo/ProfileDescription/EditProfileForm/EditProfileForm.tsx","SuperComponents/c2-SuperButton/SuperButton.tsx","components/Content/Profile/ProfileInfo/ProfileDescription/ProfileDescription.tsx","components/Content/Profile/ProfileInfo/ProfileInfo.tsx","components/Content/Profile/Posts/AddPosts/AddPosts.tsx","components/Content/Profile/Posts/AddedPosts/AddedPostsItem.tsx","components/Content/Profile/Posts/AddedPosts/AddedPostsArray.tsx","components/Content/Profile/Posts/PostsTitile/PostsTitle.tsx","components/Content/Profile/Posts/Posts.tsx","components/Content/Profile/Posts/PostsContainer.tsx","components/Content/Profile/Profile.tsx","components/Content/Profile/ProfileContainer.tsx","components/Content/Login/LoginForm.tsx","components/Content/Login/Login.tsx","components/Content/Login/LoginContainer.tsx","components/Redux/appReducer.tsx","App.tsx","reportWebVitals.ts","components/Redux/redux-store.tsx","index.tsx"],"names":["module","exports","instance","axios","create","withCredentials","headers","baseURL","usersAPI","page","count","get","then","response","data","subscribeAPI","id","post","delete","profileAPI","userID","status","put","profile","image","authAPI","email","password","rememberMe","captcha","res","SET_USER_DATA","LOG_OUT","IN_PROGRESS","RESULT_AUTH","TOGGLE_ERROR","initialState","login","isAuth","isFetching","authError","authReducer","state","action","type","stateFetching","resultAuth","stateError","inProgressAC","logoutMeAC","resultAuthAC","setUserDataAC","toggleErrorAC","Header","props","className","auth","s","wrapperRightMenu","smallPhoto","headerPhoto","src","user","onClick","logout","to","UPDATE_POST_TEXT","ADD_POST","ADD_LIKE","SET_PROFILE","SET_STATUS","OWNER_CHECK","postsData","news","likeCount","newPostText","isOwner","profileReducer","length","postText","newArray","map","elem","textStatus","ownerID","urlProfileID","setProfileTC","usersID","dispatch","setProfileUserAC","setStatusAC","objProfile","HeaderAPI","this","setProfile","console","log","React","Component","HeaderContainer","connect","profilePage","photos","small","resultCode","NavigationContainer","activeStyle","textDecoration","color","fontSize","style","isActive","undefined","ADD_MESSAGE","messageData","message","arrayUsers","name","messagesReducer","text","UserItem","user__name","Users","wrapperUsers","title","users","MessageItem","wrapperMessage","blockMessage","photo","ListMessages","AddMessageForm","Dialog","wrapperDialog","Messages","wrapperMessages","messagesPage","messages","addMessage","withAuthRedirect","location","useLocation","params","useParams","restProps","router","MessagesContainer","compose","addMessageAC","FriendsTitle","FriendsFilter","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS","TOGGLE_PRELOADER","TOGGLE_FOLLOWING","totalUsers","pageSize","currentPage","isPreloader","isFollowing","toggleFollowingAC","togglePreloaderAC","actionPreloader","totalUsersAC","newPageAC","newCurrent","followAC","unFollowAC","setUsersAC","newArrayUsers","array","friendsReducer","followed","filter","FriendsItem","checkDisable","some","alt","userPhoto","unfollow","disabled","follow","Preloader","PagesSwitcher","arrayCount","pagesCount","index","onCurrentPage","FriendList","friendsPage","FriendListContainer","newCurrentPage","changePage","getUsers","Math","ceil","i","push","items","totalCount","getUsersThunkCreator","changePageThunkCreator","followThunkCreator","unfollowThunkCreator","Friends","ProfilePhoto","wrapperPhoto","large","wrapperInputPhoto","uploadPhotoText","inputProfilePhoto","onChange","e","uploadProfilePhoto","currentTarget","files","ownerId","StatusWithoutEdit","wrapperStatus","statusText","activateEditMode","StatusWithEditMode","onChangeStatus","value","localStatus","autoFocus","onBlur","deactivateEditMode","placeholder","defaultValue","ProfileStatus","editMode","setState","alert","updateStatus","prevProps","prevState","snapshot","FullInfo","listContacts","Object","entries","contacts","itemContacts","titleItem","href","descriptionItem","wrapperFullInfo","itemProfileInfo","fullName","lookingForAJob","EditContactsForm","listInputsContacts","contact","key","split","label","register","EditProfileForm","useForm","handleSubmit","watch","formState","errors","useState","localLookingForAJob","setLocalLookingForAJob","wrapperEditProfile","onSubmit","userId","editProfile","toggleEditMode","required","aboutMe","wrapperInputCheckBox","checked","lookingForAJobDescription","SuperButton","red","textButton","finalClassName","redDis","wrapperButtonDis","wrapperButton","finalButton","defaultDis","default","ProfileDescription","collapsed","setCollapsed","editProfileMode","setEditProfileMode","myName","newElem","toUpperCase","join","wrapperDescription","headerDescription","profileName","profileEdit","ProfileInfo","wrapperProfile","AddPosts","textAreaPost","createRef","ref","current","postChange","trim","addPost","AddedPostsItem","likeArea","idMessage","Number","addLike","like","AddedPostsArray","dialogsComponent","PostsTitle","Posts","PostsContainer","newPostTextActionCreator","Profile","ProfileContainer","getProfile","setStatus","ownerCheckAC","updateStatusTC","editProfileTC","formData","FormData","append","uploadProfilePhotoTC","LoginForm","checkChanged","toggleError","formWrapper","input","checkBox","Login","loginData","loginMeTC","SET_INITIALIZED","isInitialized","setInitializeTC","promise","Promise","all","App","checkInitialize","path","element","app","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","bigReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddle","ReactDOM","render","document","getElementById"],"mappings":"sFACAA,EAAOC,QAAU,CAAC,gBAAkB,kCAAkC,aAAe,+BAA+B,UAAY,4BAA4B,gBAAkB,oC,mBCA9KD,EAAOC,QAAU,CAAC,mBAAqB,+CAA+C,kBAAoB,8CAA8C,UAAY,sCAAsC,gBAAkB,4CAA4C,gBAAkB,4CAA4C,YAAc,wCAAwC,YAAc,0C,mBCA1YD,EAAOC,QAAU,CAAC,cAAgB,mCAAmC,iBAAmB,sCAAsC,WAAa,gCAAgC,QAAU,6BAA6B,IAAM,yBAAyB,OAAS,8B,mBCA1PD,EAAOC,QAAU,CAAC,eAAiB,yCAAyC,aAAe,uCAAuC,MAAQ,gCAAgC,KAAO,iC,mBCAjLD,EAAOC,QAAU,CAAC,aAAe,mCAAmC,kBAAoB,wCAAwC,gBAAkB,sCAAsC,kBAAoB,0C,mBCA5MD,EAAOC,QAAU,CAAC,cAAgB,yCAAyC,MAAQ,iCAAiC,WAAa,wC,mBCAjID,EAAOC,QAAU,CAAC,YAAc,gCAAgC,cAAgB,kCAAkC,MAAQ,0BAA0B,SAAW,+B,mBCA/JD,EAAOC,QAAU,CAAC,YAAc,iCAAiC,iBAAmB,wC,mBCApFD,EAAOC,QAAU,CAAC,aAAe,4BAA4B,MAAQ,qBAAqB,MAAQ,uB,mBCAlGD,EAAOC,QAAU,CAAC,KAAO,4BAA4B,WAAa,oC,mBCAlED,EAAOC,QAAU,CAAC,cAAgB,mCAAmC,MAAQ,6B,mBCA7ED,EAAOC,QAAU,CAAC,gBAAkB,uCAAuC,SAAW,kC,mBCAtFD,EAAOC,QAAU,CAAC,mBAAqB,4CAA4C,qBAAuB,gD,mBCA1GD,EAAOC,QAAU,CAAC,eAAiB,sC,4LCQ7BC,E,OAAWC,EAAMC,OAAO,CAC1BC,iBAAiB,EACjBC,QAAS,CACL,UAAW,wCAEfC,QAAS,kDAmBAC,EAAW,SACXC,EAAcC,GACnB,OAAOR,EAASS,IAAT,qBAAyCF,EAAzC,kBAAuDC,IACzDE,MAAK,SAACC,GACH,OAAOA,EAASC,SAInBC,EAAe,SACjBC,GACH,OAAOd,EAASe,KAAT,iBAA8CD,IAChDJ,MAAK,SAACC,GACH,OAAOA,EAASC,SAJnBC,EAAe,SAOfC,GACL,OAAOd,EAASgB,OAAT,iBAAgDF,IAClDJ,MAAK,SAACC,GACH,OAAOA,EAASC,SAyCnBK,EAAa,SACXC,GACP,OAAOlB,EAASS,IAAT,kBAAwCS,KAF1CD,EAAa,SAIZC,GACN,OAAOlB,EAASS,IAAT,yBAAuCS,IACzCR,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAN1BK,EAAa,SAQTE,GACT,OAAOnB,EAASoB,IAAT,iBAA8D,CAACD,OAAQA,KATzEF,EAAa,SAWVI,GACR,OAAOrB,EAASoB,IAAmC,UAAWC,GACzDX,MAAK,SAACC,GACH,OAAOA,EAASC,SAdnBK,EAAa,SAiBHK,GACf,OAAOtB,EAASoB,IAAI,iBAAiBE,GAChCZ,MAAK,SAACC,GACH,OAAOA,EAASC,SAUnBW,EAAU,WAEf,OAAOvB,EAASS,IAAgC,WAC3CC,MAAK,SAACC,GACH,OAAOA,EAASC,SAJnBW,EAAU,YAO6C,IAAzDC,EAAwD,EAAxDA,MAAMC,EAAkD,EAAlDA,SAASC,EAAyC,EAAzCA,WAAWC,EAA8B,EAA9BA,QAC7B,OAAO3B,EAASe,KAAwB,cAAc,CAACS,QAAMC,WAASC,aAAWC,YAC5EjB,MAAK,SAACkB,GACH,OAAOA,EAAIhB,SAVdW,EAAU,WAcf,OAAOvB,EAASgB,OAAsC,eACjDN,MAAK,SAACkB,GACH,OAAOA,EAAIhB,SCtIrBiB,EAAgB,gBAChBC,EAAU,UACVC,EAAc,cACdC,EAAc,cACdC,EAAe,eAGjBC,EAAe,CACfpB,GAAI,KACJU,MAAO,KACPW,MAAO,KACPC,QAAQ,EACRC,YAAY,EACZC,WAAW,GAqDAC,EApCK,WAAiF,IAAhFC,EAA+E,uDAAtDN,EAAcO,EAAwC,uCAChG,OAAQA,EAAOC,MACX,KAAKb,EACD,OAAO,2BACAW,GACAC,EAAO7B,MAElB,KAAKkB,EACD,MAAO,CACHhB,GAAI,KACJU,MAAO,KACPW,MAAO,KACPC,QAAQ,EACRC,YAAY,EACZC,WAAW,GAEnB,KAAKP,EACD,OAAO,2BACAS,GADP,IAEIH,WAAYI,EAAOE,gBAE3B,KAAKX,EACD,OAAO,2BACAQ,GADP,IAEIJ,OAAQK,EAAOG,aAEvB,KAAKX,EACD,OAAO,2BACAO,GADP,IAEIF,UAAWG,EAAOI,aAE1B,QACI,OAAOL,IAwDbM,EAAe,SAACH,GAClB,MAAO,CACHD,KAAMX,EACNY,kBAKFI,EAAa,WACf,MAAO,CACHL,KAAMZ,IAKRkB,EAAe,SAACJ,GAClB,MAAO,CACHF,KAAMV,EACNY,eAMKK,EAAgB,SAACnC,EAAYU,EAAeW,EAAeC,GACpE,MAAO,CACHM,KAAMb,EACNjB,KAAM,CAACE,KAAIU,QAAOW,QAAOC,YAMpBc,EAAgB,SAACL,GAC1B,MAAO,CACHH,KAAMT,EACNY,e,OC9JO,MAA0B,iC,wBCsC1BM,EA1BA,SAACC,GAKZ,OACI,yBAAQC,UAAW,SAAnB,UACI,qBAAKA,UAAW,eAAhB,kBACA,qBAAKA,UAAW,kBAAhB,SACKD,EAAME,KAAKlB,OACN,sBAAKiB,UAAWE,IAAEC,iBAAlB,UACGJ,EAAMK,WAAa,qBAAKJ,UAAWE,IAAEG,YAAaC,IAAKP,EAAMK,aAAgB,qBAAKJ,UAAWE,IAAEG,YAAcC,IAAKC,IAClHR,EAAME,KAAKnB,MACZ,wBAAQ0B,QAZT,WACjBT,EAAMU,UAWY,uBAEF,cAAC,IAAD,CAASC,GAAI,SAAb,yB,OCrBhBC,EAAmB,mBACnBC,EAAW,WACXC,EAAW,WACXC,EAAc,cACdC,EAAa,aACbC,EAAc,cAmChBnC,EAAiC,CACjCoC,UACI,CACI,CAACxD,GAAI,EAAGyD,KAAM,yDAA0DC,UAAW,IACnF,CAAC1D,GAAI,EAAGyD,KAAM,oBAAqBC,UAAW,GAC9C,CAAC1D,GAAI,EAAGyD,KAAM,uCAAwCC,UAAW,IAEzEC,YAAa,GACbpD,QAAS,KACTF,OAAQ,GACRuD,SAAS,GA2DEC,EAhDQ,WAAmF,IAAlFnC,EAAiF,uDAAvDN,EAAcO,EAAyC,uCACrG,OAAQA,EAAOC,MACX,KAAKuB,EACD,OAAO,2BACAzB,GADP,IAEI8B,UAAU,GAAD,mBAAM9B,EAAM8B,WAAZ,CACL,CACIxD,GAAI0B,EAAM8B,UAAUM,OAAS,EAC7BL,KAAM/B,EAAMiC,YACZD,UAAW,KAEnBC,YAAa,KAErB,KAAKT,EACD,OAAO,2BACAxB,GADP,IAEIiC,YAAahC,EAAOoC,WAG5B,KAAKX,EACD,IAAIY,EAAWtC,EAAM8B,UAAUS,KAAI,SAAAC,GAAI,OAAIA,EAAKlE,KAAO2B,EAAO3B,GAAnB,2BACpCkE,GADoC,IAEvCR,UAAWQ,EAAKR,UAAY,IAC5BQ,KACJ,OAAO,2BACAxC,GADP,IAEI8B,UAAWQ,IAEnB,KAAKX,EACD,OAAO,2BACA3B,GADP,IAEInB,QAASoB,EAAOpB,UAExB,KAAK+C,EACD,OAAO,2BACA5B,GADP,IAEIrB,OAAQsB,EAAOwC,aAEvB,KAAKZ,EACD,OAAO,2BACA7B,GADP,IAEIkC,QAASjC,EAAOyC,UAAYzC,EAAO0C,eAE3C,QACI,OAAO3C,IAON4C,EAAe,SAACC,GACzB,OAAO,SAACC,GACJrE,EAAsBoE,GACjB3E,MAAK,SAACC,GACH2E,EAASC,GAAiB5E,EAASC,YAoD7C4E,GAAc,SAACP,GACjB,MAAO,CACHvC,KAAM0B,EACNa,eAMKM,GAAmB,SAACE,GAC7B,MAAO,CACH/C,KAAMyB,EACN9C,QAASoE,ICjLXC,G,uKAEF,WACOC,KAAKvC,MAAM8B,SACVS,KAAKvC,MAAMwC,WAAWD,KAAKvC,MAAM8B,W,oBAIzC,WAGI,OAFAW,QAAQC,IAAIH,KAAKvC,MAAMK,YACvBoC,QAAQC,IAAIH,KAAKvC,MAAM8B,SACf,cAAC,EAAD,eAAYS,KAAKvC,Y,GAXT2C,IAAMC,WA6CfC,GAFOC,aAxBE,SAAC1D,GAA0C,IAAD,EAC9D,MAAO,CACHc,KAAMd,EAAMc,KACZG,WAAU,UAACjB,EAAM2D,YAAY9E,eAAnB,aAAC,EAA2B+E,OAAOC,MAC7CnB,QAAQ1C,EAAMc,KAAKxC,OAQA,SAACwE,GACxB,MAAO,CACHxB,OAAQ,WACJwB,GJ+BD,SAACA,GACJ/D,IACKb,MAAK,SAACkB,GACoB,IAAnBA,EAAI0E,YACJhB,EAASvC,YIjCrB6C,WAAW,SAACV,GACRI,EAASF,EAAaF,QAMZgB,CAA6CR,ICyBnDa,GAJUL,aAPJ,SAAC1D,GACnB,MAAO,CACHtB,OAAOsB,EAAMc,KAAKxC,MAKAoF,EArEN,SAAC9C,GAqBjB,IAAIoD,EAAkB,CAClBC,eAAgB,OAChBC,MAAO,SACPC,SAAU,QAEd,OACI,qBAAKtD,UAAW,MAAhB,SACI,+BACI,oBAAIA,UAAW,YAAf,SACI,cAAC,IAAD,CAASU,GAAE,mBAAcX,EAAMlC,QAAU0F,MAAS,qBAAGC,SACtCL,OAAcM,GAD7B,uBAIJ,oBAAIzD,UAAW,YAAf,SACI,cAAC,IAAD,CAASU,GAAG,YAAY6C,MAAS,qBAAGC,SACrBL,OAAcM,GAD7B,wBAIJ,oBAAIzD,UAAW,YAAf,SACI,cAAC,IAAD,CAASU,GAAG,WAAW6C,MAAS,qBAAGC,SACpBL,OAAcM,GAD7B,uBAIJ,oBAAIzD,UAAW,YAAf,SACI,cAAC,IAAD,CAASU,GAAG,QAAQ6C,MAAS,qBAAGC,SACjBL,OAAcM,GAD7B,oBAIJ,oBAAIzD,UAAW,YAAf,SACI,cAAC,IAAD,CAASU,GAAG,SAAS6C,MAAS,qBAAGC,SAClBL,OAAcM,GAD7B,6B,QCtDdC,GAAc,cAgBhB7E,GAAiC,CACjC8E,YAAa,CACT,CAAClG,GAAI,EAAGmG,QAAS,UACjB,CAACnG,GAAI,EAAGmG,QAAS,QACjB,CAACnG,GAAI,EAAGmG,QAAS,WACjB,CAACnG,GAAI,EAAGmG,QAAS,SACjB,CAACnG,GAAI,EAAGmG,QAAS,UAGrBC,WAAY,CACR,CAACpG,GAAI,EAAGqG,KAAM,SACd,CAACrG,GAAI,EAAGqG,KAAM,SACd,CAACrG,GAAI,EAAGqG,KAAM,SACd,CAACrG,GAAI,EAAGqG,KAAM,QACd,CAACrG,GAAI,EAAGqG,KAAM,eAqBPC,GAhBS,WAAqF,IAApF5E,EAAmF,uDAAxDN,GAAcO,EAA0C,uCACxG,OAAQA,EAAOC,OACNqE,GACM,2BACAvE,GADP,IAEIwE,YAAY,GAAD,mBAAMxE,EAAMwE,aAAZ,CACP,CACIlG,GAAI0B,EAAMwE,YAAYpC,OAAS,EAC/BqC,QAASxE,EAAO4E,UAIrB7E,G,oBCxBJ8E,GAdE,SAAClE,GAEd,OACI,qBAAKC,UAAWE,KAAEK,KAAlB,SACI,qBAAKP,UAAWE,KAAEgE,WAAlB,SACI,cAAC,IAAD,CAASxD,GAAI,aAAeX,EAAMtC,GACzBuC,UAAW,cAAEwD,SAAF,MAA2B,IAD/C,SAEKzD,EAAM+D,UAJU/D,EAAMtC,K,oBCqB5B0G,GAvBD,SAACpE,GAGX,IAAI8D,EAA8B9D,EAAM8D,WAClC9D,EAAM8D,WAAWnC,KAAI,SAACC,GACpB,OAAO,cAAC,GAAD,CAAUmC,KAAMnC,EAAKmC,KAAMrG,GAAIkE,EAAKlE,IAASkE,EAAKlE,OAE3D,cAAC,GAAD,CAAUqG,KAAM,YAAarG,GAAI,MAGvC,OACI,sBAAKuC,UAAWE,KAAEkE,aAAlB,UACI,qBAAKpE,UAAWE,KAAEmE,MAAlB,mBAGA,qBAAKrE,UAAWE,KAAEoE,MAAlB,SACKT,Q,oBCFFU,GAjBK,SAACxE,GACjB,OACI,qBAAKC,UAAWE,KAAEsE,eAAlB,SACI,sBAAKxE,UAAWE,KAAEuE,aAAlB,UACI,qBAAKzE,UAAWE,KAAEwE,QAGlB,qBAAK1E,UAAWE,KAAE8D,KAAlB,SACA,+BACCjE,EAAM6D,gBAPwB7D,EAAMtC,KCiBtCkH,GAlBM,SAAC5E,GAGlB,OACI,mCACKA,EAAM4D,YACD5D,EAAM4D,YAAYjC,KAAI,SAACC,GACzB,OAAO,cAAC,GAAD,CAAaiC,QAASjC,EAAKiC,QACdnG,GAAIkE,EAAKlE,IACJkE,EAAKlE,OAG5B,2DCjBLmH,GAAiB,WAC1B,OAAQ,8B,oBCkBGC,GAZA,SAAC9E,GAEZ,OACI,sBAAKC,UAAWE,KAAE4E,cAAlB,UACI,oBAAI9E,UAAWE,KAAEmE,MAAjB,sBACA,cAAC,GAAD,CAAcV,YAAa5D,EAAM4D,cACjC,cAAC,GAAD,Q,oBCQGoB,GAdE,SAAChF,GACd,OACI,sBAAKC,UAAWE,KAAE8E,gBAAlB,UACQ,cAAC,GAAD,CAAOnB,WAAY9D,EAAMkF,aAAapB,aAC1C,qBAAK7D,UAAWE,KAAEgF,SAAlB,SACI,cAAC,GAAD,CACIvB,YAAa5D,EAAMkF,aAAatB,YAChCwB,WAAcpF,EAAMoF,mB,uBCPjC,SAASC,GAAoBzC,GAwBhC,OAHiCE,aALC,SAAC1D,GAC/B,MAAO,CACHJ,OAAQI,EAAMc,KAAKlB,UAGM8D,EAnBjC,SAA2B9C,GACvB,IAAIsF,EAAqBC,eACrBC,EAAiBC,eAChBzG,EAAwBgB,EAAxBhB,OAAW0G,EAAhB,aAA6B1F,EAA7B,IAEA,OAAKhB,EAGE,cAAC4D,EAAD,2BAAe8C,GAAf,IACWJ,SAAUA,EACVK,OAAQH,KAJf,cAAC,KAAD,CAAU7E,GAAE,c,aCRzBiF,G,4JAEF,WACI,OAAQ,cAAC,GAAD,eAAcrD,KAAKvC,Y,GAHH2C,IAAMC,WA+BvBiD,gBACX/C,aArBkB,SAAC1D,GACnB,MAAO,CACH8F,aAAc9F,EAAM8F,iBAQH,SAAChD,GACrB,MAAO,CACJkD,WAAY,SAACnB,GACT/B,ET4BgB,SAAC+B,GACzB,MAAO,CACH3E,KAAMqE,GACNM,QS/Ba6B,CAAa7B,SAS9BoB,GAFWQ,CAGbD,IC/BaG,GARM,WACjB,OACI,qBAAK9F,UAAW,mBAAhB,2BCKO+F,GARO,WAClB,OACI,qBAAK/F,UAAW,uBCHlBgG,GAAS,SACTC,GAAW,WACXC,GAAY,YACZC,GAAmB,mBACnBC,GAAkB,kBAClBC,GAAmB,mBACnBC,GAAmB,mBAGrBzH,GAAe,CACfyF,MAAO,GACPiC,WAAY,EACZC,SAAU,GACVC,YAAa,EACbC,aAAa,EACbC,YAAa,IAoJJC,GAAoB,SAACnJ,GAC9B,MAAO,CACH4B,KAAMiH,GACN7I,GAAIA,IAKCoJ,GAAoB,SAACC,GAC9B,MAAO,CACHzH,KAAMgH,GACNK,YAAaI,IAKRC,GAAe,SAACR,GACzB,MAAO,CACHlH,KAAM+G,GACNG,WAAYA,IAKPS,GAAY,SAACC,GACtB,MAAO,CACH5H,KAAM8G,GACNc,WAAYA,IAKPC,GAAW,SAACrJ,GACrB,MAAO,CACHwB,KAAM2G,GACNvI,GAAII,IAKCsJ,GAAa,SAACtJ,GACvB,MAAO,CACHwB,KAAM4G,GACNxI,GAAII,IAKCuJ,GAAa,SAACC,GACvB,MAAO,CACHhI,KAAM6G,GACNoB,MAAOD,IAIAE,GA7LQ,WAAmF,IAAlFpI,EAAiF,uDAAvDN,GAAcO,EAAyC,uCACrG,OAAQA,EAAOC,MACX,KAAK2G,GACD,OAAO,2BACA7G,GADP,IAEImF,MAAOnF,EAAMmF,MAAM5C,KAAI,SAACC,GACpB,OAAIA,EAAKlE,KAAO2B,EAAO3B,GACZ,2BACAkE,GADP,IAEI6F,UAAU,IAGP,eACA7F,QAKvB,KAAKsE,GACD,OAAO,2BACA9G,GADP,IAEImF,MAAOnF,EAAMmF,MAAM5C,KAAI,SAACC,GACpB,OAAIA,EAAKlE,KAAO2B,EAAO3B,GACZ,2BAAIkE,GAAX,IAAiB6F,UAAU,IAEpB,eACA7F,QAKvB,KAAKuE,GACD,OAAO,2BACA/G,GADP,IAEImF,MAAM,YAAKlF,EAAOkI,SAE1B,KAAKnB,GACD,OAAO,2BACAhH,GADP,IAEIsH,YAAarH,EAAO6H,aAG5B,KAAKb,GACD,OAAO,2BACAjH,GADP,IAEIoH,WAAYnH,EAAOmH,aAG3B,KAAKF,GACD,OAAO,2BACAlH,GADP,IAEIuH,YAAatH,EAAOsH,cAG5B,KAAKJ,GACD,OAAO,2BACAnH,GADP,IAEIwH,YAAaxH,EAAMuH,YAAN,sBACHvH,EAAMwH,aADH,CACgBvH,EAAO3B,KADvB,YAEH0B,EAAMwH,YAAYc,QAAO,SAAChK,GAAD,OAAQA,IAAO2B,EAAO3B,SAGjE,QACI,OAAO0B,IC9CJuI,GArCK,SAAC3H,GACjB,IAMM4H,EAAwB5H,EAAM4G,YAAYiB,MAAK,SAACnK,GAAD,OAAeA,IAAOsC,EAAMQ,KAAK9C,MAItF,OACI,sBAAKuC,UAAW,cAAhB,UACI,cAAC,IAAD,CAASU,GAAE,mBAAcX,EAAMQ,KAAK9C,IAApC,SACI,qBAAKuC,UAAW,qBAAhB,SACI,qBAAK6H,IAAK,YAAavH,IAAiC,OAA5BP,EAAMQ,KAAKwC,OAAOC,MAAiBjD,EAAMQ,KAAKwC,OAAOC,MAAQ8E,QAGjG,sBAAK9H,UAAW,2BAAhB,UACI,sBAAKA,UAAW,oBAAhB,UAAsCD,EAAMQ,KAAKuD,KAAjD,OACA,qBAAK9D,UAAW,oBAAhB,SAAsCD,EAAMQ,KAAKzC,SACjD,qBAAKkC,UAAW,uBAAhB,qBACA,qBAAKA,UAAW,oBAAhB,qBAEJ,qBAAKA,UAAW,sBAAhB,SACKD,EAAMQ,KAAKiH,SACR,qBAAOxH,UAAW,YAAlB,SACI,wBAAQQ,QA1BT,WACfT,EAAMgI,SAAShI,EAAMQ,KAAK9C,KAyBmBuK,SAAUL,EAAvC,wBAGJ,qBAAM3H,UAAW,YAAjB,SACI,wBAAQQ,QA3BX,WACbT,EAAMkI,OAAOlI,EAAMQ,KAAK9C,KA0BmBuK,SAAUL,EAArC,4BCjCTO,GAPG,WACd,OACI,qBAAKlI,UAAW,YAAhB,SACI,qBAAKA,UAAW,kBAAhB,wBCICmI,GAAgB,SAACpI,GAG1B,OACI,mCAGQA,EAAMqI,WACDX,QAAO,SAAC9F,GACL,OAAIA,EAAO,GAAK5B,EAAM0G,aAAe9E,EAAO,GAAK5B,EAAM0G,cAEhC,IAAT9E,GAAcA,IAAS5B,EAAMsI,eAC5C3G,KAAI,SAACC,EAAc2G,GAQtB,OAPIvI,EAAM0G,aAAe,IACjB9E,IAAS5B,EAAM0G,YAAc,GAAK9E,IAAS5B,EAAM0G,YAAc,GAC3D9E,IAAS5B,EAAMsI,aACf1G,EAAO,IAKf,8BACc,IAATA,EACK,wCAEF,sBAAkB3B,UAAWD,EAAM0G,cAAgB9E,EAAO,aAAe,eACnEnB,QAAS,WACLT,EAAMwI,cAAc5G,IAF9B,SAGUA,GAHC2G,IAJTA,SCiBnBE,GA7BE,SAACzI,GAGd,OACI,mCACI,sBAAKC,UAAW,kBAAhB,UACKD,EAAM0I,YAAY/B,YAAc,cAAC,GAAD,SAAejD,EAChD,qBAAKzD,UAAW,QAAhB,SACI,cAAC,GAAD,CAAeyG,YAAa1G,EAAM0G,YACnB2B,WAAYrI,EAAMqI,WAClBC,WAAYtI,EAAMsI,WAClBE,cAAexI,EAAMwI,kBAGvCxI,EAAM0I,YAAYnE,MAAM5C,KAAI,SAACC,GAC1B,OAAO,cAAC,GAAD,CAAapB,KAAMoB,EAENsG,OAAQlI,EAAMkI,OACdF,SAAUhI,EAAMgI,SAChBpB,YAAa5G,EAAM0I,YAAY9B,YAC/BD,YAAa3G,EAAM0I,YAAY/B,aAJ1B/E,EAAKlE,aCnB5CiL,G,4MAIFH,cAAgB,SAACI,GAEb,EAAK5I,MAAM6I,WAAWD,EAAgB,EAAK5I,MAAM0I,YAAYjC,W,uDALjE,WACIlE,KAAKvC,MAAM8I,SAASvG,KAAKvC,MAAM0I,YAAYhC,YAAanE,KAAKvC,MAAM0I,YAAYjC,Y,oBAQnF,WAGI,IAFA,IAAI6B,EAAaS,KAAKC,KAAKzG,KAAKvC,MAAM0I,YAAYlC,WAAajE,KAAKvC,MAAM0I,YAAYjC,UAClF4B,EAAa,GACRY,EAAI,EAAGA,GAAKX,EAAYW,IAC7BZ,EAAWa,KAAKD,GAIpB,OACI,cAAC,GAAD,yBAAYZ,WAAYA,EACZC,WAAYA,EACZE,cAAejG,KAAKiG,eAChBjG,KAAKvC,OAHrB,IAIY0G,YAAanE,KAAKvC,MAAM0I,YAAYhC,mB,GAvB1B/D,IAAMC,WAqEzBiD,gBACX/C,aApCkB,SAAC1D,GACnB,MAAO,CACHsJ,YAAYtJ,EAAMsJ,gBAWD,SAACxG,GACtB,MAAO,CACH4G,SAAU,SAACpC,EAAqBD,GAC5BvE,ELkCwB,SAACwE,EAAqBD,GACtD,OAAO,SAACvE,GACJA,EAAS4E,IAAkB,IAC3B5J,EAAkBwJ,EAAaD,GAC1BnJ,MAAK,SAACC,GACH2E,EAASmF,GAAW9J,EAAS4L,QAC7BjH,EAAS8E,GAAazJ,EAAS6L,aAC/BlH,EAAS4E,IAAkB,QKzCtBuC,CAAqB3C,EAAaD,KAE/CoC,WAAY,SAACD,EAAwBnC,GACjCvE,EL0C0B,SAAC0G,EAAwBnC,GAC3D,OAAO,SAACvE,GACJA,EAAS+E,GAAU2B,IACnB1G,EAAS4E,IAAkB,IAC3B5J,EAAkB0L,EAAgBnC,GAC7BnJ,MAAK,SAACC,GAEH2E,EAASmF,GAAW9J,EAAS4L,QAC7BjH,EAAS4E,IAAkB,QKlDtBwC,CAAuBV,EAAgBnC,KAEpDyB,OAAQ,SAACxK,GACLwE,ELoDsB,SAACxE,GAC/B,OAAO,SAACwE,GACJA,EAAS4E,IAAkB,IAC3B5E,EAAS2E,GAAkBnJ,IAC3BD,EAAoBC,GACfJ,MAAK,SAACE,GACqB,IAApBA,EAAK0F,YACLhB,EAASiF,GAASzJ,IAEtBwE,EAAS4E,IAAkB,IAC3B5E,EAAS2E,GAAkBnJ,QK9DtB6L,CAAmB7L,KAEhCsK,SAAU,SAACtK,GACPwE,ELiEwB,SAACxE,GACjC,OAAO,SAACwE,GACJA,EAAS4E,IAAkB,IAC3B5E,EAAS2E,GAAkBnJ,IAC3BD,EAAsBC,GACjBJ,MAAK,SAACE,GACqB,IAApBA,EAAK0F,YACLhB,EAASkF,GAAW1J,IAExBwE,EAAS4E,IAAkB,IAC3B5E,EAAS2E,GAAkBnJ,QK3EtB8L,CAAqB9L,SAU3BmI,CAEb8C,ICrEac,GAXC,WACZ,OACI,sBAAKxJ,UAAW,YAAhB,UACI,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,Q,oBCDCyJ,GAAe,SAAC1J,GAQzB,OACI,sBAAKC,UAAWE,KAAEwJ,aAAlB,UACI,qBAAK7B,IAAK,YAAavH,IAA4B,OAAvBP,EAAMgD,OAAO4G,MAAiB7B,EAAY/H,EAAMgD,OAAO4G,QAClF5J,EAAMsB,SACH,sBAAKrB,UAAWE,KAAE0J,kBAAlB,UACI,uBAAO5J,UAAWE,KAAE2J,gBAApB,0BACA,uBAAO7J,UAAWE,KAAE4J,kBACbzF,MAAO,uBACPhF,KAAM,OACN0K,SAdV,SAACC,GACVjK,EAAMkK,mBAAmBD,EAAEE,cAAcC,MAAO,GAAIpK,EAAMqK,UAcvCtG,KAAM,wB,4BCtBpBuG,GAAoB,SAACtK,GAChC,OACI,sBAAKC,UAAWE,KAAEoK,cAAlB,UACI,sBAAMtK,UAAWE,KAAEmE,MAAnB,qBACCtE,EAAMjC,OACD,sBAAMkC,UAAWE,KAAEqK,WAAa/J,QAAST,EAAMyK,iBAA/C,SAAkEzK,EAAMjC,SACxE,sBAAMkC,UAAWE,KAAEqK,WAAY/J,QAAST,EAAMyK,iBAAkBjH,MAAO,CAACF,MAAO,QAA/E,SAA0F,+BCL7FoH,GAAqB,SAAC1K,GAE/B,OACI,8BACI,uBAAOgK,SAAUhK,EAAM2K,eAAgBC,MAAO5K,EAAM6K,YAAaC,WAAW,EACrEC,OAAQ/K,EAAMgL,mBAAoBC,YAAajL,EAAMjC,OAASiC,EAAMjC,OAAS,oBAAqBmN,aAAclL,EAAMjC,YCCnIoN,G,4MACF/L,MAAwB,CACpBgM,UAAU,EACVrN,OAAQ,EAAKiC,MAAMjC,OAAS,EAAKiC,MAAMjC,OAAS,I,EAGpD0M,iBAAmB,WACf,EAAKzK,MAAMsB,QACL,EAAK+J,SAAS,CACZD,UAAU,IAEZE,MAAM,8L,EAEhBN,mBAAqB,WACjB,EAAKK,SAAS,CACVD,UAAU,IAEd,EAAKpL,MAAMuL,aAAa,EAAKnM,MAAMrB,S,EAEvC4M,eAAiB,SAACV,GACd,EAAKoB,SAAS,CACVtN,OAAQkM,EAAEE,cAAcS,S,wDAIhC,SAAmBY,EAAwCC,EAAqCC,GACxFnJ,KAAKvC,MAAMjC,SAAWyN,EAAUzN,QAChCwE,KAAK8I,SAAS,CACVtN,OAAQwE,KAAKvC,MAAMjC,OAASwE,KAAKvC,MAAMjC,OAAS,O,oBAK5D,WACI,OACI,mCACMwE,KAAKnD,MAAMgM,SAKP,cAAC,GAAD,CAAoBP,YAAatI,KAAKnD,MAAMrB,OACxB4M,eAAgBpI,KAAKoI,eACrBK,mBAAoBzI,KAAKyI,mBACzBjN,OAAQwE,KAAKvC,MAAMjC,SAPvC,cAAC,GAAD,CAAmBA,OAAQwE,KAAKvC,MAAMjC,OACnB0M,iBAAkBlI,KAAKkI,yB,GAtCpC9H,IAAMC,WAqDnBuI,M,oBC3DFQ,GAAW,SAAC3L,GACrB,IAAI4L,EAAeC,OAAOC,QAAQ9L,EAAM/B,QAAQ8N,UAAUpK,KAAI,SAACC,EAAM2G,GACjE,OACI,sBAAiBtI,UAAWE,KAAE6L,aAA9B,UACI,uBAAM/L,UAAWE,KAAE8L,UAAnB,UAA+BrK,EAAK,GAApC,OACCA,EAAK,GACA,mBAAGsK,KAAMtK,EAAK,GAAI3B,UAAWE,KAAEgM,gBAA/B,SAAiDvK,EAAK,KACtD,sBAAM3B,UAAWE,KAAEgM,gBAAnB,iBAJA5D,MASlB,OAEI,sBAAKtI,UAAWE,KAAEiM,gBAAlB,UACI,sBAAKnM,UAAWE,KAAEkM,gBAAlB,UACI,sBAAMpM,UAAWE,KAAE8L,UAAnB,wBACA,sBAAMhM,UAAWE,KAAEgM,gBAAnB,SAAqCnM,EAAM/B,QAAQqO,cAEvD,sBAAKrM,UAAWE,KAAEkM,gBAAlB,UACI,sBAAMpM,UAAWE,KAAE8L,UAAnB,gCACA,sBAAMhM,UAAWE,KAAEgM,gBAAnB,SAAqCnM,EAAM/B,QAAQsO,eAAiB,MAAQ,UAEhF,sBAAKtM,UAAWE,KAAEkM,gBAAlB,UACI,sBAAMpM,UAAWE,KAAE8L,UAAnB,uBACCL,S,iDCtBJY,GAAmB,SAACxM,GAC7B,IAAIyM,EAAqBZ,OAAOC,QAAQ9L,EAAM+L,UAAUpK,KAAI,SAAA+K,GACxD,mBAAmBA,EAAnB,GAAKC,EAAL,KAAU/B,EAAV,KAEI7G,EADJ4I,EAAM,YAAcA,EAEpB,EAAwBA,EAAIC,MAAM,KAAlC,oBAAeC,GAAf,WAEA,OACI,qCACI,gCAAQA,IACR,mCAAO3B,aAAcN,GAAgB,IAAQ5K,EAAM8M,SAAS/I,WAKxE,OACI,qCACI,8CACC0I,MCmBAM,GAAkB,SAAC/M,GAC5B,MAA6DgN,eAAtDF,EAAP,EAAOA,SAAUG,EAAjB,EAAiBA,aAQjB,GARA,EAA+BC,MAA/B,EAAsCC,UAAYC,OAQIC,mBAAkBrN,EAAM/B,QAAQsO,iBAAtF,oBAAOe,EAAP,KAA4BC,EAA5B,KAKA,OACI,uBAAMtN,UAAWE,KAAEqN,mBAAoBC,SAAUR,GAbd,SAAAzP,GACnCiF,QAAQC,IAAIlF,GACZA,EAAKkQ,OAAS1N,EAAM8B,QACpB9B,EAAM2N,YAAYnQ,EAAMA,EAAKkQ,QAC7B1N,EAAM4N,oBASN,UACI,8CACA,mCAAOtO,KAAM,OAAQ4L,aAAclL,EAAM/B,QAAQqO,UAAcQ,EAAS,WAAY,CAACe,UAAU,MAC/F,8CACA,sCACI3C,aAAclL,EAAM/B,QAAQ6P,QAAU9N,EAAM/B,QAAQ6P,QAAU,IAAShB,EAAS,UAAW,CAACe,UAAU,MAC1G,sBAAK5N,UAAWE,KAAE4N,qBAAsBtN,QAXd,WAC9B8M,GAAwBD,IAUpB,UACI,wCACA,mCAAOhO,KAAM,WAAY0O,QAASV,GAAyBR,EAAS,uBAExE,mCACI5B,aAAclL,EAAM/B,QAAQgQ,0BAA4BjO,EAAM/B,QAAQgQ,0BAA4B,IAC9FnB,EAAS,4BAA6B,CAACe,UAAU,MACzD,cAAC,GAAD,CAAkB9B,SAAU/L,EAAM/B,QAAQ8N,SACxBe,SAAUA,IAE5B,uBAAOxN,KAAM,e,kEC1CV4O,GA3BqC,SAAC,GAM/C,IAJEC,EAIH,EAJGA,IAAKlO,EAIR,EAJQA,UACLmO,EAGH,EAHGA,WAAY3N,EAGf,EAHeA,QACTiF,EAEN,mBAGK2I,EAAc,UAAMpO,EAAN,YAAmBkO,EACjCzI,EAAUuC,SAAW9H,KAAEmO,OAAQnO,KAAEgO,IACjCzI,EAAUuC,SAAW9H,KAAEoO,iBAAmBpO,KAAEqO,cAF9B,KAGdC,EAAW,UAAM/I,EAAUuC,SAAW9H,KAAEuO,WAAavO,KAAEwO,QAA5C,YAAwDP,GAKzE,OACI,qBAAKnO,UAAWoO,EAAgB5N,QALb,SAACwJ,GACpBxJ,GAAWA,EAAQwJ,IAInB,SACI,oCACIhK,UAAWwO,GACP/I,OCbPkJ,GAAqB,SAAC5O,GAC/B,MAAgCqN,oBAAS,GAAzC,oBAAKwB,EAAL,KAAgBC,EAAhB,KAIA,EAA4CzB,oBAAS,GAArD,oBAAK0B,EAAL,KAAsBC,EAAtB,KAEMpB,EAAiB,WACnBoB,GAAoBD,IAGlBE,EAASjP,EAAM/B,QAASqO,SAASM,MAAM,KAAKjL,KAAI,SAACC,GACnD,IAAIsN,EAAUtN,EAAKgL,MAAM,IAEzB,OADAsC,EAAQ,GAAKA,EAAQ,GAAGC,cACjBD,EAAQE,KAAK,OACrBA,KAAK,KAER,OACI,sBAAKnP,UAAWE,KAAEkP,mBAAlB,UACI,sBAAKpP,UAAWE,KAAEmP,kBAAlB,UACI,sBAAMrP,UAAWE,KAAEoP,YAAnB,SAAiCN,IAChCjP,EAAMsB,SAAW,sBAAMb,QAASmN,EAAgB3N,UAAWE,KAAEqP,YAA5C,6BAErBT,EACK,cAAC,GAAD,CAAiBnB,eAAgBA,EAChB3P,QAAS+B,EAAM/B,QACf6D,QAAS9B,EAAM8B,QACf6L,YAAa3N,EAAM2N,cAEpC,qCACE,cAAC,GAAD,CAAe5P,OAAQiC,EAAMjC,OACdwN,aAAcvL,EAAMuL,aACpBjK,QAAStB,EAAMsB,UAE9B,sBAAKrB,UAAWE,KAAEkM,gBAAlB,UACI,sBAAMpM,UAAWE,KAAE8L,UAAnB,uBACA,sBAAMhM,UAAWE,KAAEgM,gBAAnB,SAAqCnM,EAAM/B,QAAQ6P,QAAU9N,EAAM/B,QAAQ6P,QAAU,SAEzF,sBAAK7N,UAAWE,KAAEkM,gBAAlB,UACI,sBAAMpM,UAAWE,KAAE8L,UAAnB,gCACA,sBAAMhM,UAAWE,KAAEgM,gBAAnB,SAAqCnM,EAAM/B,QAAQgQ,0BAA4BjO,EAAM/B,QAAQgQ,0BAA4B,SAE5HY,GAAa,cAAC,GAAD,CAAU5Q,QAAS+B,EAAM/B,UACvC,cAAC,GAAD,CAAawC,QAzCL,WACpBqO,GAAcD,IAwCF,8B,oBCjBLY,GA1BK,SAACzP,GACjB,OAAsB,OAAlBA,EAAM/B,QAEF,sBAAKgC,UAAWE,KAAEuP,eAAlB,UACI,cAAC,GAAD,CAAc1M,OAAQhD,EAAM/B,QAAQ+E,OACtBqH,QAASrK,EAAM8B,QACfoI,mBAAoBlK,EAAMkK,mBAC1B5I,QAAStB,EAAMsB,UAE7B,cAAC,GAAD,CAAoBrD,QAAS+B,EAAM/B,QACfF,OAAQiC,EAAMjC,OACdwN,aAAcvL,EAAMuL,aACpBjK,QAAStB,EAAMsB,QACfQ,QAAS9B,EAAM8B,QACf6L,YAAa3N,EAAM2N,iBAMxC,cAAC,GAAD,KCQAgC,GA3CO,SAAC3P,GACnB,IAAI4P,EAAoBjN,IAAMkN,YAkB9B,OACI,sBAAK5P,UAAW,WAAhB,UAGI,qBAAKA,UAAW,kBAAhB,SACI,0BAAU6P,IAAKF,EACL3E,YAAa,uBACbjB,SAvBE,WACpB,IAAI/F,EAAY2L,EAAaG,QAAQnF,MACrC5K,EAAMgQ,WAAW/L,IAsBC2G,MAAO5K,EAAMqB,gBAK3B,qBAAKpB,UAAW,mBAAhB,SACI,qBAAKQ,QAxBI,WACgB,KAA7BT,EAAMqB,YAAY4O,QAA8C,MAA7BjQ,EAAMqB,YAAY4O,OACrD3E,MAAM,+FAENtL,EAAMkQ,WAoBuBjQ,UAAW,SAApC,SACI,qBAAKA,UAAW,eAAhB,0BCbLkQ,GArBY,SAACnQ,GAExB,IAAIoQ,EAAezN,IAAMkN,YAOzB,OACI,qBAAK5P,UAAW,cAAhB,SACI,sBAAKA,UAAW,eAAhB,UACI,qBAAK6H,IAAK,YAAa7H,UAAW,sBAAuBM,IAAKC,IAC9D,qBAAKP,UAAW,qBAAhB,SAAuCD,EAAMmB,OAC7C,sBAAK2O,IAAKM,EAAU1S,GAAIsC,EAAMtC,GAAI+C,QAV1B,WACpB,IAAI4P,EAAYC,OAAOF,EAASjG,cAAczM,IAC9CsC,EAAMuQ,QAAQF,IAQoDpQ,UAAW,qBAAjE,mBAA8FD,EAAMwQ,cCOrGC,GAlBa,SAACzQ,GACzB,IAAI0Q,EAAmC1Q,EAAMkB,UAAUS,KAAI,SAACC,GACxD,OAAQ,cAAC,GAAD,CAAgBT,KAAQS,EAAKT,KACbqP,KAAQ5O,EAAKR,UACb1D,GAAIkE,EAAKlE,GACT6S,QAAWvQ,EAAMuQ,SACV3O,EAAKlE,OAKxC,OACI,qBAAKuC,UAAW,aAAhB,SACCyQ,KCNMC,GATI,WACf,OACI,qBAAK1Q,UAAW,eAAhB,uBC2BO2Q,GA3BG,SAAC5Q,GAEf,OACI,sBAAKC,UAAW,QAAhB,UAGI,cAAC,GAAD,IAIA,cAAC,GAAD,CAAUoB,YAAerB,EAAM+C,YAAY1B,YACjC2O,WAAchQ,EAAMgQ,WACpBE,QAAWlQ,EAAMkQ,UAK3B,cAAC,GAAD,CAAiBhP,UAAWlB,EAAM+C,YAAY7B,UAC7BqP,QAAWvQ,EAAMuQ,cCe/BM,GAJQ/N,aA3BD,SAAC1D,GACnB,MAAO,CACH2D,YAAa3D,EAAM2D,gBAUF,SAACb,GACtB,MAAO,CACHqO,QAAS,SAACF,GACNnO,ErC2LD,CACH5C,KAAMwB,EACNpD,GqC7LkC2S,KAElCH,QAAS,WACLhO,ErCgLD,CACH5C,KAAMuB,KqC/KNmP,WAAY,SAAC/L,GACT/B,ErCmK4B,SAAC+B,GACrC,MAAO,CACH3E,KAAMsB,EACNa,SAAUwC,GqCtKG6M,CAAyB7M,QAMvBnB,CAA4C8N,ICRpDG,GAVC,SAAC/Q,GACb,OACI,sBAAKC,UAAW,UAAhB,UACI,cAAC,GAAD,eAAiBD,IACjB,cAAC,GAAD,QCGNgR,G,4MACF5R,MAAwB,CACpBsO,OAAQ,EAAK1N,MAAMsF,U,uDAGvB,WACI/C,KAAKvC,MAAMiR,YAAY1O,KAAKvC,MAAM2F,OAAO+H,QACzCnL,KAAKvC,MAAMkR,WAAW3O,KAAKvC,MAAM2F,OAAO+H,QACxCnL,KAAKvC,MAAMmR,cAAc5O,KAAKvC,MAAM2F,OAAO+H,OAASnL,KAAKvC,MAAM8B,W,gCAGnE,SAAmB0J,EAAuCC,EAAyBC,GAC3EF,EAAUlG,WAAa/C,KAAKvC,MAAMsF,WAClC/C,KAAKvC,MAAMiR,YAAY1O,KAAKvC,MAAM2F,OAAO+H,QACzCnL,KAAKvC,MAAMkR,WAAW3O,KAAKvC,MAAM2F,OAAO+H,QACxCnL,KAAKvC,MAAMmR,cAAc5O,KAAKvC,MAAM2F,OAAO+H,OAASnL,KAAKvC,MAAM8B,Y,oBAKvE,WACI,OAAQ,cAAC,GAAD,CAAS7D,QAASsE,KAAKvC,MAAM/B,QACpBF,OAAQwE,KAAKvC,MAAMjC,OACnBwN,aAAchJ,KAAKvC,MAAMuL,aACzBjK,QAASiB,KAAKvC,MAAMsB,QACpBQ,QAASS,KAAKvC,MAAM8B,QACpB6L,YAAapL,KAAKvC,MAAM2N,YACxBzD,mBAAoB3H,KAAKvC,MAAMkK,yB,GA3BzBvH,IAAMC,WAoFtBiD,gBACX/C,aA7CkB,SAAC1D,GACnB,MAAO,CACHnB,QAASmB,EAAM2D,YAAY9E,QAC3BF,OAAQqB,EAAM2D,YAAYhF,OAC1BuD,QAASlC,EAAM2D,YAAYzB,QAC3BQ,QAAS1C,EAAMc,KAAKxC,OAaH,SAACwE,GACtB,MAAO,CACH+O,WAAY,SAACnT,GACToE,EAASF,EAAalE,KAE1BoT,UAAW,SAACpT,GvCuCO,IAACmE,EuCtChBC,GvCsCgBD,EuCtCKnE,EvCuCtB,SAACoE,GACJrE,EAAqBoE,GAChB3E,MAAK,SAACC,GACH2E,EAASE,GAAY7E,WuCxC7BgO,aAAc,SAACxN,GACXmE,EvC2CkB,SAACnE,GAC3B,OAAO,SAACmE,GACJrE,EAAwBE,GACnBT,MAAK,SAACC,GAC8B,IAA7BA,EAASC,KAAK0F,YACdhB,EAASE,GAAYrE,QuChDpBqT,CAAerT,KAE5BoT,aAAc,SAACpP,EAAcD,GACzBI,EvC2HgB,SAACH,EAAsBD,GAC/C,MAAO,CACHxC,KAAM2B,EACNc,eACAD,WuC/HaqP,CAAapP,EAAcD,KAExC6L,YAAY,SAAC1P,EAAQoM,GACjBnI,EvCgDiB,SAACjE,EAA0BoM,GACpD,OAAO,SAACnI,GACJrE,EAAuBI,GAClBX,MAAK,SAACC,GACyB,IAAxBA,EAAS2F,YACThB,EAASF,EAAaqI,QuCrDrBgH,CAAcpT,EAAQoM,KAEnCH,mBAAmB,SAACvF,EAAM0F,GACtBnI,EvCwDwB,SAACyC,EAAa0F,GAC9C,OAAO,SAACnI,GACJ,IAAIoP,EAAW,IAAIC,SACnBD,EAASE,OAAO,QAAS7M,GACzB9G,EAA8ByT,GACzBhU,MAAK,SAAAC,GACiC,OAA/BA,EAASC,KAAKwF,OAAO4G,OACrB1H,EAASF,EAAaqI,QuC/DrBoH,CAAqB9M,EAAM0F,SAU5ChF,GAFWQ,CAGbmL,I,oBCxFWU,GAAY,SAAC1R,GACtB,MAAsDgN,eAA/CF,EAAP,EAAOA,SAAUG,EAAjB,EAAiBA,aAA0BG,EAA3C,EAA+BD,UAAYC,OAGrCuE,EAAe,WACnB3R,EAAM4R,aAAY,IAMpB,OAAI5R,EAAMhB,OACC,cAAC,KAAD,CAAU2B,GAAE,mBAAcX,EAAMtC,MAGvC,mCACKsC,EAAMf,WACD,cAAC,GAAD,IACA,uBAAMgB,UAAWE,KAAE0R,YAAapE,SAAUR,GAVhB,SAACzP,GACrCwC,EAAMjB,MAAMvB,MASF,UACE,0CACA,mCAAOiD,QAASkR,EAAc1G,YAAa,QAAShL,UAAWE,KAAE2R,MAC1D5G,aAAc,IAAQ4B,EAAS,QAAS,CAACe,UAAU,MACzDT,EAAOhP,OAAS,0DACjB,6CACA,mCAAOqC,QAASkR,EAAc1R,UAAWE,KAAE2R,MAAO7G,YAAa,WAAY3L,KAAM,YAAgBwN,EAAS,WAAY,CAACe,UAAU,MAChIT,EAAO/O,UAAY,0DACpB,sBAAK4B,UAAWE,KAAE4R,SAAlB,UACI,mCAAOzS,KAAM,YAAgBwN,EAAS,gBACtC,kDAEH9M,EAAMd,WAAa,sBAAMsE,MAAO,CAACF,MAAM,OAApB,wCACpB,uBAAOhE,KAAM,iBC1BlB0S,GAhBD,SAAChS,GAEX,OACI,gCACI,8CACA,cAAC,GAAD,CAAWjB,MAAOiB,EAAMjB,MACbE,WAAYe,EAAMf,WAClBD,OAAQgB,EAAMhB,OACdtB,GAAIsC,EAAMtC,GACVkU,YAAa5R,EAAM4R,YACnB1S,UAAWc,EAAMd,gBCwBzB2G,gBACX/C,aAZoB,SAAC1D,GACvB,MAAM,CACFF,UAAWE,EAAMc,KAAKhB,UACtBxB,GAAG0B,EAAMc,KAAKxC,GACduB,WAAYG,EAAMc,KAAKjB,WACvBD,OAAQI,EAAMc,KAAKlB,WArBE,SAACkD,GAC1B,MAAO,CACHnD,MADG,SACGkT,GACA/P,E7C8Ea,SAAC+P,GACtB,OAAO,SAAC/P,GACJA,EAASxC,GAAa,IACtBvB,EAAc8T,GACT3U,MAAK,SAACkB,GACoB,IAAnBA,EAAI0E,WACJ/E,IACKb,MAAK,SAACC,GACH,MAAyBA,EAASC,KAA7BE,EAAL,EAAKA,GAAIU,EAAT,EAASA,MAAOW,EAAhB,EAAgBA,MAChBmD,EAASrC,EAAcnC,EAAIU,EAAOW,GAAO,IACzCmD,EAAStC,GAAa,IACtBsC,EAASxC,GAAa,QAG9BwC,EAASpC,GAAc,IACvBoC,EAASxC,GAAa,S6C7FrBwS,CAAUD,KAEzBL,YAJG,SAISnS,GACNyC,EAASpC,EAAcL,SAqBpBoG,EArCQ,SAAC7F,GAEpB,OAAO,cAAC,GAAD,eAAWA,OCPhBmS,GAAkB,kBAMlBrT,GAA8B,CAChCsT,eAAc,GAuBLC,GAAkB,WAC7B,OAAO,SAACnQ,GACJ,IAAIoQ,EAAWpQ,G9CiDV,SAACA,GACJ,OAAO/D,IACFb,MAAK,SAACC,GACH,MAAyBA,EAASC,KAA7BE,EAAL,EAAKA,GAAIU,EAAT,EAASA,MAAOW,EAAhB,EAAgBA,MAChBmD,EAASrC,EAAcnC,EAAIU,EAAOW,GAAO,U8CpDnDwT,QAAQC,IAAI,CAACF,IACRhV,MAAK,WACF4E,EAVN,CACF5C,KAAK6S,UCZLM,G,uKACF,WACIlQ,KAAKvC,MAAM0S,oB,oBAGf,WACI,OACI,mCACMnQ,KAAKvC,MAAMoS,cAER,sBAAKnS,UAAW,cAAhB,UACG,cAAC,GAAD,IACA,cAAC,GAAD,IACA,qBAAKA,UAAW,uBAAhB,SACI,eAAC,KAAD,WACI,cAAC,KAAD,CAAO0S,KAAM,IAAKC,QAAS,cAAC,GAAD,MAC3B,cAAC,KAAD,CAAOD,KAAM,mBAAoBC,QAAS,cAAC,GAAD,MAC1C,cAAC,KAAD,CAAOD,KAAM,cAAeC,QAAS,cAAC,GAAD,MACrC,cAAC,KAAD,CAAOD,KAAM,YAAaC,QAAS,cAAC,GAAD,MAEnC,cAAC,KAAD,CAAOD,KAAM,WAAYC,QAAS,cAAC,GAAD,WAG1C,qBAAK3S,UAAW,cAdlB,cAAC,GAAD,U,GATJ0C,IAAMC,WAyDTiD,gBACX/C,aATkB,SAAC1D,GACnB,MAAO,CACHgT,cAAehT,EAAMyT,IAAIT,cACzBpT,OAAQI,EAAMc,KAAKlB,WAhBF,SAACkD,GACtB,MAAO,CACHwQ,gBAAiB,WACbxQ,EAASmQ,WAkBNxM,CAEb4M,IC/DaK,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB1V,MAAK,YAAkD,IAA/C2V,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,SCGVO,GAAaC,aAAgB,CAC7BxQ,YAAaxB,EACb2D,aAAclB,GACd0E,YAAalB,GACbtH,KAAKf,EACL0T,IHFsB,WAA4D,IAA3DzT,EAA0D,uDAAlDN,GAAaO,EAAqC,uCACjF,OAAQA,EAAOC,OACN6S,GACM,2BACA/S,GADP,IAEIgT,eAAc,IAGXhT,KGARoU,GAAQC,aAAYH,GAAWI,aAAgBC,OCb1DC,IAASC,OACD,cAAC,IAAD,UACI,cAAC,IAAD,CAAUL,MAAOA,GAAjB,SACI,cAAC,GAAD,QAGRM,SAASC,eAAe,SAE5BjB,O","file":"static/js/main.95c309a2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemProfileInfo\":\"FullInfo_itemProfileInfo__iDiQY\",\"itemContacts\":\"FullInfo_itemContacts__3A_7-\",\"titleItem\":\"FullInfo_titleItem__1ecLP\",\"descriptionItem\":\"FullInfo_descriptionItem__10p8D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperDescription\":\"ProfileDescription_wrapperDescription__23tkb\",\"headerDescription\":\"ProfileDescription_headerDescription__9vd5d\",\"titleItem\":\"ProfileDescription_titleItem__V02oQ\",\"descriptionItem\":\"ProfileDescription_descriptionItem__32k1h\",\"itemProfileInfo\":\"ProfileDescription_itemProfileInfo__2u4A_\",\"profileName\":\"ProfileDescription_profileName__1W-Jh\",\"profileEdit\":\"ProfileDescription_profileEdit__3Q5V5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperButton\":\"SuperButton_wrapperButton__2XkQO\",\"wrapperButtonDis\":\"SuperButton_wrapperButtonDis__3IoVD\",\"defaultDis\":\"SuperButton_defaultDis__3l6dG\",\"default\":\"SuperButton_default__1hS5q\",\"red\":\"SuperButton_red__1VLuR\",\"redDis\":\"SuperButton_redDis__1PhjZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperMessage\":\"MessageItemStyle_wrapperMessage__25A9n\",\"blockMessage\":\"MessageItemStyle_blockMessage__3Tna4\",\"photo\":\"MessageItemStyle_photo__16Dg4\",\"text\":\"MessageItemStyle_text__3R7PN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperPhoto\":\"ProfilePhoto_wrapperPhoto__2CPyT\",\"inputProfilePhoto\":\"ProfilePhoto_inputProfilePhoto__2SQR9\",\"uploadPhotoText\":\"ProfilePhoto_uploadPhotoText__2R5Ca\",\"wrapperInputPhoto\":\"ProfilePhoto_wrapperInputPhoto__2UN70\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperStatus\":\"StatusWithoutEdit_wrapperStatus__2YIXj\",\"title\":\"StatusWithoutEdit_title__3B7yN\",\"statusText\":\"StatusWithoutEdit_statusText__2shI-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formWrapper\":\"LoginStyle_formWrapper__13AH0\",\"buttonWrapper\":\"LoginStyle_buttonWrapper__1EWY2\",\"input\":\"LoginStyle_input__K-U5D\",\"checkBox\":\"LoginStyle_checkBox__1CtRh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerPhoto\":\"HeaderStyle_headerPhoto__OLZoS\",\"wrapperRightMenu\":\"HeaderStyle_wrapperRightMenu__C3c80\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperUsers\":\"Users_wrapperUsers__oZrBs\",\"title\":\"Users_title__1RV_b\",\"users\":\"Users_users__3zNVW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"UserItemStyle_user__3M2gP\",\"user__name\":\"UserItemStyle_user__name__1rOxP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperDialog\":\"DialogStyle_wrapperDialog__3xWtl\",\"title\":\"DialogStyle_title__nAKJ9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperMessages\":\"MessagesStyle_wrapperMessages__169uu\",\"messages\":\"MessagesStyle_messages__11fjk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperEditProfile\":\"EditProfuleForm_wrapperEditProfile__n-Kf-\",\"wrapperInputCheckBox\":\"EditProfuleForm_wrapperInputCheckBox__387FQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperProfile\":\"ProfileInfo_wrapperProfile__2XwnK\"};","import axios from \"axios\";\nimport {LoginDataRequestType} from \"../components/Redux/authReducer\";\n\n\ntype ResponseType<T> = {\n    resultCode: number\n    messages: Array<string>\n    data: T\n}\nconst instance = axios.create({\n    withCredentials: true,\n    headers: {\n        'API-KEY': '8c93655a-bf70-40c8-9c2a-4929b88b2e49'\n    },\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/'\n})\n\n\nexport type UserType = {\n    id: number\n    name: string\n    status: string\n    photos: {\n        small: string\n        large: string\n    }\n    followed: boolean\n}\ntype GetUsersType = {\n    items: Array<UserType>\n    totalCount: number\n    error: string\n}\nexport const usersAPI = {\n    getUsers(page: number, count: number) {\n        return instance.get<GetUsersType>(`users?page=${page}&count=${count}`)\n            .then((response) => {\n                return response.data\n            })\n    },\n}\nexport const subscribeAPI = {\n    follow(id: number) {\n        return instance.post<ResponseType<object>>(`follow/${id}`)\n            .then((response) => {\n                return response.data\n            })\n    },\n    unfollow(id: number) {\n        return instance.delete<ResponseType<object>>(`follow/${id}`)\n            .then((response) => {\n                return response.data\n            })\n    }\n}\n\n\nexport type EditProfileType = {\n    userId: number\n    lookingForAJob: boolean\n    lookingForAJobDescription: null | string\n    fullName: string\n    aboutMe: null | string\n    contacts: {\n        facebook: null | string\n        github: null | string\n        instagram: null | string\n        mainLink: null | string\n        twitter: null | string\n        vk: null | string\n        website: null | string\n        youtube: null | string\n    }\n}\ntype GetProfileType = {\n    aboutMe: null | string\n    contacts: {\n        facebook: null | string\n        github: null | string\n        instagram: null | string\n        mainLink: null | string\n        twitter: null | string\n        vk: null | string\n        website: null | string\n        youtube: null | string\n    }\n    fullName: string\n    lookingForAJob: boolean\n    lookingForAJobDescription: null | string\n    photos: { small: null | string, large: null | string }\n    userId: number\n}\nexport const profileAPI = {\n    getProfile(userID: number) {\n        return instance.get<GetProfileType>(`profile/${userID}`)\n    },\n    getStatus(userID: number) {\n        return instance.get<string>(`profile/status/${userID}`)\n            .then(response => response.data)\n    },\n    updateStatus(status: string) {\n        return instance.put<ResponseType<{status:string}>>(`profile/status`, {status: status})\n    },\n    editProfile(profile:EditProfileType){\n        return instance.put<ResponseType<EditProfileType>>('profile', profile)\n            .then((response)=>{\n                return response.data\n            })\n    },\n    uploadProfilePhoto(image:object){\n        return instance.put('/profile/photo',image)\n            .then((response)=>{\n                return response.data\n            })\n    }\n}\n\ntype DataAuthType = {\n    id: number\n    email: string\n    login: string\n}\nexport const authAPI = {\n    authMe() {\n        return instance.get<ResponseType<DataAuthType>>('auth/me')\n            .then((response) => {\n                return response.data\n            })\n    },\n    login({email,password,rememberMe,captcha}:LoginDataRequestType){\n        return instance.post<ResponseType<any>>('/auth/login',{email,password,rememberMe,captcha})\n            .then((res)=>{\n                return res.data\n            })\n    },\n    logout(){\n        return instance.delete<ResponseType<{userId:number}>>('/auth/login')\n            .then((res)=>{\n                return res.data\n            })\n    }\n}","import {authAPI} from \"../../API/api\";\nimport {Dispatch} from \"redux\";\n\n\nconst SET_USER_DATA = \"SET_USER_DATA\"\nconst LOG_OUT = 'LOG_OUT'\nconst IN_PROGRESS = 'IN_PROGRESS'\nconst RESULT_AUTH = 'RESULT_AUTH'\nconst TOGGLE_ERROR = 'TOGGLE_ERROR'\n\n\nlet initialState = {\n    id: null,\n    email: null,\n    login: null,\n    isAuth: false,\n    isFetching: false,\n    authError: false,\n}\nexport type AuthReducerType = {\n    id: number | null\n    email: string | null\n    login: string | null\n    isAuth: boolean\n    isFetching: boolean\n    authError: boolean\n}\ntype ActionType =\n    SetUserDataACType |\n    LogoutMeACType |\n    InProgressACType |\n    ResultAuthACType |\n    ToggleErrorAC\n\nconst authReducer = (state: AuthReducerType = initialState, action: ActionType): AuthReducerType => {\n    switch (action.type) {\n        case SET_USER_DATA:\n            return {\n                ...state,\n                ...action.data\n            }\n        case LOG_OUT:\n            return {\n                id: null,\n                email: null,\n                login: null,\n                isAuth: false,\n                isFetching: false,\n                authError: false\n            }\n        case IN_PROGRESS:\n            return {\n                ...state,\n                isFetching: action.stateFetching\n            }\n        case RESULT_AUTH:\n            return {\n                ...state,\n                isAuth: action.resultAuth\n            }\n        case TOGGLE_ERROR:\n            return {\n                ...state,\n                authError: action.stateError\n            }\n        default:\n            return state\n    }\n}\n\nexport default authReducer;\n\n\nexport const logoutMeTC = () => {\n    return (dispatch: Dispatch) => {\n        authAPI.logout()\n            .then((res) => {\n                if (res.resultCode === 0) {\n                    dispatch(logoutMeAC())\n                }\n            })\n    }\n}\n\nexport const authMeTC = () => {\n    return (dispatch: Dispatch) => {\n        return authAPI.authMe()\n            .then((response) => {\n                let {id, email, login} = response.data\n                dispatch(setUserDataAC(id, email, login, true))\n            })\n    }\n}\n\nexport type LoginDataRequestType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha?: boolean | undefined\n}\nexport const loginMeTC = (loginData: LoginDataRequestType) => {\n    return (dispatch: Dispatch) => {\n        dispatch(inProgressAC(true))\n        authAPI.login(loginData)\n            .then((res) => {\n                if (res.resultCode === 0) {\n                    authAPI.authMe()\n                        .then((response) => {\n                            let {id, email, login} = response.data\n                            dispatch(setUserDataAC(id, email, login, true))\n                            dispatch(resultAuthAC(true))\n                            dispatch(inProgressAC(false))\n                        })\n                } else {\n                    dispatch(toggleErrorAC(true))\n                    dispatch(inProgressAC(false))\n                }\n            })\n    }\n}\n\ntype InProgressACType = { type: typeof IN_PROGRESS, stateFetching: boolean }\nconst inProgressAC = (stateFetching: boolean): InProgressACType => {\n    return {\n        type: IN_PROGRESS,\n        stateFetching\n    }\n}\n\ntype LogoutMeACType = { type: typeof LOG_OUT }\nconst logoutMeAC = (): LogoutMeACType => {\n    return {\n        type: LOG_OUT\n    }\n}\n\ntype ResultAuthACType = { type: typeof RESULT_AUTH, resultAuth: boolean }\nconst resultAuthAC = (resultAuth: boolean): ResultAuthACType => {\n    return {\n        type: RESULT_AUTH,\n        resultAuth\n    }\n}\n\n\ntype SetUserDataACType = { type: typeof SET_USER_DATA, data: { id: number, email: string, login: string, isAuth: boolean } }\nexport const setUserDataAC = (id: number, email: string, login: string, isAuth: boolean): SetUserDataACType => {\n    return {\n        type: SET_USER_DATA,\n        data: {id, email, login, isAuth},\n\n    }\n}\n\nexport type ToggleErrorAC = { type: typeof TOGGLE_ERROR, stateError: boolean }\nexport const toggleErrorAC = (stateError: boolean): ToggleErrorAC => {\n    return {\n        type: TOGGLE_ERROR,\n        stateError\n    }\n}\n\n\n","export default __webpack_public_path__ + \"static/media/user.c5d8a3f8.png\";","import React from \"react\";\nimport {NavLink} from \"react-router-dom\";\nimport {AuthReducerType} from \"../Redux/authReducer\";\nimport user from './../../img/user/user.png'\nimport s from './HeaderStyle.module.scss'\n\ntype HeaderPropsType = {\n    auth:AuthReducerType\n    logout:()=>void\n    smallPhoto:string | null | undefined\n}\n\nconst Header = (props: HeaderPropsType) => {\n    const onLogoutMe = () => {\n      props.logout()\n    }\n\n    return (\n        <header className={'header'}>\n            <div className={'header__logo'}>logo</div>\n            <div className={'header__profile'}>\n                {props.auth.isAuth\n                    ? <div className={s.wrapperRightMenu}>\n                        {props.smallPhoto ? <img className={s.headerPhoto} src={props.smallPhoto}/> : <img className={s.headerPhoto}  src={user}/>}\n                        {props.auth.login}\n                        <button onClick={onLogoutMe}>logout</button>\n                    </div>\n                    : <NavLink to={'/login'}>Login</NavLink>\n                }\n\n            </div>\n        </header>\n    )\n\n\n}\n\n\nexport default Header","import {EditProfileType, profileAPI} from \"../../API/api\";\nimport {Dispatch} from \"redux\";\nimport {ThunkDispatch} from \"redux-thunk\";\nimport {StateType} from \"./redux-store\";\nimport append from \"react-hook-form/dist/utils/append\";\n\nconst UPDATE_POST_TEXT = 'UPDATE-POST-TEXT';\nconst ADD_POST = 'ADD-POST';\nconst ADD_LIKE = 'ADD-LIKE';\nconst SET_PROFILE = 'SET-PROFILE';\nconst SET_STATUS = 'SET-STATUS';\nconst OWNER_CHECK = 'OWNER_CHECK'\n\n\ntype PostsData = {\n    id: number\n    news: string\n    likeCount: number\n}\nexport type ProfileType = {\n    aboutMe: null | string\n    contacts: {\n        facebook: null | string\n        github: null | string\n        instagram: null | string\n        mainLink: null | string\n        twitter: null | string\n        vk: null | string\n        website: null | string\n        youtube: null | string\n    }\n    fullName: string\n    lookingForAJob: boolean\n    lookingForAJobDescription: null | string\n    photos: { small: null | string, large: null | string }\n    userId: number\n}\nexport type ProfileStateType = {\n    postsData: Array<PostsData>\n    newPostText: string\n    profile: ProfileType | null\n    status: string | undefined\n    isOwner: boolean\n}\n\n\nlet initialState: ProfileStateType = {\n    postsData:\n        [\n            {id: 1, news: \"the weather in St. Petersburg is suitable for studying\", likeCount: 99},\n            {id: 2, news: 'tear and sword c:', likeCount: 2},\n            {id: 3, news: 'this is my first project on a react!', likeCount: 8},\n        ],\n    newPostText: '',\n    profile: null,\n    status: '',\n    isOwner: false\n}\ntype ActionType =\n    NewPostAddAC |\n    NewPostTextACType |\n    AddLikeAC |\n    SetProfileUserACType |\n    SetStatusACType |\n    OwnerCheckTypeAC\n\n\nconst profileReducer = (state: ProfileStateType = initialState, action: ActionType): ProfileStateType => {\n    switch (action.type) {\n        case ADD_POST:\n            return {\n                ...state,\n                postsData: [...state.postsData,\n                    {\n                        id: state.postsData.length + 1,\n                        news: state.newPostText,\n                        likeCount: 0\n                    }],\n                newPostText: ''\n            }\n        case UPDATE_POST_TEXT:\n            return {\n                ...state,\n                newPostText: action.postText\n            }\n\n        case ADD_LIKE:\n            let newArray = state.postsData.map(elem => elem.id === action.id ? {\n                ...elem,\n                likeCount: elem.likeCount + 1\n            } : elem)\n            return {\n                ...state,\n                postsData: newArray\n            }\n        case SET_PROFILE:\n            return {\n                ...state,\n                profile: action.profile\n            }\n        case SET_STATUS:\n            return {\n                ...state,\n                status: action.textStatus\n            }\n        case OWNER_CHECK:\n            return {\n                ...state,\n                isOwner: action.ownerID === action.urlProfileID\n            }\n        default:\n            return state\n    }\n}\n\nexport default profileReducer;\n\n\nexport const setProfileTC = (usersID: number) => {\n    return (dispatch: Dispatch) => {\n        profileAPI.getProfile(usersID)\n            .then((response) => {\n                dispatch(setProfileUserAC(response.data))\n            })\n    }\n}\nexport const setStatusTC = (usersID: number) => {\n    return (dispatch: Dispatch) => {\n        profileAPI.getStatus(usersID)\n            .then((response) => {\n                dispatch(setStatusAC(response))\n            })\n    }\n}\nexport const updateStatusTC = (status: string) => {\n    return (dispatch: Dispatch) => {\n        profileAPI.updateStatus(status)\n            .then((response) => {\n                if (response.data.resultCode === 0) {\n                    dispatch(setStatusAC(status))\n                }\n            })\n    }\n}\n\nexport const editProfileTC = (profile: EditProfileType, ownerId: number) => {\n    return (dispatch: ThunkDispatch<StateType, unknown, ActionType>) => {\n        profileAPI.editProfile(profile)\n            .then((response) => {\n                if (response.resultCode === 0) {\n                    dispatch(setProfileTC(ownerId))\n                }\n            })\n    }\n}\n\nexport const uploadProfilePhotoTC = (photo: File, ownerId: number) => {\n    return (dispatch: ThunkDispatch<StateType, unknown, ActionType>) => {\n        let formData = new FormData()\n        formData.append('image', photo)\n        profileAPI.uploadProfilePhoto(formData)\n            .then(response => {\n                if (response.data.photos.large !== null) {\n                    dispatch(setProfileTC(ownerId))\n                }\n            })\n    }\n}\n\n\ntype SetStatusACType = {\n    type: typeof SET_STATUS\n    textStatus: string\n}\nconst setStatusAC = (textStatus: string): SetStatusACType => {\n    return {\n        type: SET_STATUS,\n        textStatus\n    }\n}\n\n\ntype SetProfileUserACType = { type: typeof SET_PROFILE, profile: ProfileType }\nexport const setProfileUserAC = (objProfile: ProfileType): SetProfileUserACType => {\n    return {\n        type: SET_PROFILE,\n        profile: objProfile\n    }\n}\n\n\ntype NewPostTextACType = { type: typeof UPDATE_POST_TEXT, postText: string }\nexport const newPostTextActionCreator = (text: string): NewPostTextACType => {\n    return {\n        type: UPDATE_POST_TEXT,\n        postText: text\n    }\n}\n\n\ntype NewPostAddAC = { type: typeof ADD_POST }\nexport const newPostAddActionCreator = (): NewPostAddAC => {\n    return {\n        type: ADD_POST\n    }\n}\n\n\ntype AddLikeAC = { type: typeof ADD_LIKE, id: number }\nexport const addLikeActionCreator = (id: number): AddLikeAC => {\n    return {\n        type: ADD_LIKE,\n        id: id\n    }\n}\n\ntype OwnerCheckTypeAC = { type: typeof OWNER_CHECK, urlProfileID: number, ownerID: number | null }\nexport const ownerCheckAC = (urlProfileID: number, ownerID: number | null): OwnerCheckTypeAC => {\n    return {\n        type: OWNER_CHECK,\n        urlProfileID,\n        ownerID,\n    }\n}","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {AuthReducerType, logoutMeTC} from \"../Redux/authReducer\";\nimport Header from \"./Header\";\nimport {ThunkDispatch} from \"redux-thunk\";\nimport {StateType} from \"../Redux/redux-store\";\nimport {setProfileTC} from \"../Redux/profileReducer\";\n\ntype HeaderAPIType = MapStateToPropsType & MapDispatchToPropsType\nclass HeaderAPI extends React.Component<HeaderAPIType> {\n\n    componentDidMount() {\n        if(this.props.ownerID){\n            this.props.setProfile(this.props.ownerID)\n        }\n    }\n\n    render() {\n        console.log(this.props.smallPhoto)\n        console.log(this.props.ownerID)\n        return (<Header {...this.props} />);\n    }\n}\ntype MapStateToPropsType = {\n    auth:AuthReducerType\n    smallPhoto:string | null | undefined\n    ownerID:number | null\n}\nconst mapStateToProps = (state: StateType):MapStateToPropsType => {\n    return {\n        auth: state.auth,\n        smallPhoto:state.profilePage.profile?.photos.small,\n        ownerID:state.auth.id\n    }\n}\n\ntype MapDispatchToPropsType = {\n    logout:()=>void\n    setProfile:(ownerID:number)=>void\n}\nconst mapDispatchToProps = (dispatch:ThunkDispatch<any, any, any>):MapDispatchToPropsType => {\n    return {\n        logout: () => {\n            dispatch(logoutMeTC())\n        },\n        setProfile:(ownerID:number)=>{\n            dispatch(setProfileTC(ownerID))\n        }\n    }\n}\n\n\nlet HeaderContainer = connect(mapStateToProps, mapDispatchToProps)(HeaderAPI)\n\nexport default HeaderContainer\n\n\n","import React from \"react\";\nimport {NavLink} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\nconst  Navigation = (props:any) => {\n    // TYPE DECLARATION!!!!!!!!!!!!!!!!!!!!!!!!!!\n    // declare function NavLink(\n    //     props: NavLinkProps\n    // ): React.ReactElement;\n    //\n    // interface NavLinkProps\n    //     extends Omit<\"className\" | \"style\" |  > {\n    //     caseSensitive?: boolean;\n    //     className?:\n    //         | string\n    //         | ((props: { isActive: boolean }) => string);\n    //     end?: boolean;\n    //     style?:\n    //         | React.CSSProperties\n    //         | ((props: {\n    //         isActive: boolean;\n    //     }) => React.CSSProperties);\n    // }\n\n\n    let activeStyle:any = {\n        textDecoration: \"none\",\n        color: \"orange\",\n        fontSize: 22 + 'px'\n    };\n    return (\n        <nav className={'nav'}>\n            <ul>\n                <li className={'nav__elem'}>\n                    <NavLink to={`/profile/${props.userID}`} style = {({ isActive }) =>\n                        isActive ? activeStyle : undefined\n                    } >Profile</NavLink>\n                </li>\n                <li className={'nav__elem'}>\n                    <NavLink to=\"/messages\" style = {({ isActive }) =>\n                        isActive ? activeStyle : undefined\n                    }>Messages</NavLink>\n                </li>\n                <li className={'nav__elem'}>\n                    <NavLink to=\"/friends\" style = {({ isActive }) =>\n                        isActive ? activeStyle : undefined\n                    }>Friends</NavLink>\n                </li>\n                <li className={'nav__elem'}>\n                    <NavLink to=\"/news\" style = {({ isActive }) =>\n                        isActive ? activeStyle : undefined\n                    }>News</NavLink>\n                </li>\n                <li className={'nav__elem'}>\n                    <NavLink to=\"/music\" style = {({ isActive }) =>\n                        isActive ? activeStyle : undefined\n                    }>Music</NavLink>\n                </li>\n\n            </ul>\n        </nav>\n    )\n};\n\n\n\nlet mapStateToProps = (state:any) => {\n    return {\n        userID:state.auth.id\n    }\n}\n\n\nlet NavigationContainer = connect(mapStateToProps)(Navigation)\n\n\n\nexport default  NavigationContainer;","const ADD_MESSAGE = 'ADD_MESSAGE';\n\n\nexport type MessageType = {\n    id:number\n    message:string\n}\nexport type UserType = {\n    id:number\n    name:string\n}\nexport type MessagesStateType = {\n    messageData: Array<MessageType>\n    arrayUsers:Array<UserType>\n}\n\nlet initialState:MessagesStateType = {\n    messageData: [\n        {id: 1, message: 'Blabla'},\n        {id: 2, message: 'Lala'},\n        {id: 3, message: 'Bruh...'},\n        {id: 4, message: 'JINGO'},\n        {id: 5, message: 'JANGO'},\n\n    ],\n    arrayUsers: [\n        {id: 1, name: 'Ilgiz'},\n        {id: 2, name: 'Pavel'},\n        {id: 3, name: 'Alena'},\n        {id: 4, name: 'Olga'},\n        {id: 5, name: 'Alexander'}\n    ]\n}\n\n\nconst messagesReducer = (state: MessagesStateType = initialState, action: actionsType):MessagesStateType => {\n    switch (action.type) {\n        case ADD_MESSAGE:\n            return  {\n                ...state,\n                messageData: [...state.messageData,\n                    {\n                        id: state.messageData.length + 1,\n                        message: action.text\n                    }]\n            }\n        default:\n            return state\n    }\n}\n\nexport default messagesReducer;\n\ntype actionsType =\n    NewMessageAddACType\n\n\n\n\n\n\ntype NewMessageAddACType = {type:typeof ADD_MESSAGE,text:string}\nexport const addMessageAC = (text:string):NewMessageAddACType => {\n    return {\n        type: ADD_MESSAGE,\n        text\n    }\n}\n\n","import React from \"react\";\nimport {NavLink} from \"react-router-dom\";\nimport s from \"./UserItemStyle.module.scss\"\n\ninterface IUserItemProps {\n    id: number\n    name: string\n}\n\nconst UserItem = (props: IUserItemProps) => {\n\n    return (\n        <div className={s.user} key={props.id}>\n            <div className={s.user__name}>\n                <NavLink to={\"/messages/\" + props.id}\n                         className={({isActive}) => isActive ? '' : ''}>\n                    {props.name}\n                </NavLink>\n            </div>\n        </div>\n    )\n};\n\nexport default UserItem;","import React from \"react\";\nimport UserItem from \"./UserItem/UserItem\";\nimport s from \"./Users.module.scss\"\nimport {UserType} from \"../../../Redux/messagesReducer\";\n\n\ninterface IUsersProps {\n    arrayUsers: Array<UserType>\n}\n\nconst Users = (props: IUsersProps) => {\n\n\n    let arrayUsers: React.ReactNode = props.arrayUsers\n        ? props.arrayUsers.map((elem) => {\n            return <UserItem name={elem.name} id={elem.id} key={elem.id}/>;\n        })\n        : <UserItem name={'Test User'} id={999}/>\n\n\n    return (\n        <div className={s.wrapperUsers}>\n            <div className={s.title}>\n                USERS\n            </div>\n            <div className={s.users}>\n                {arrayUsers}\n            </div>\n        </div>\n\n    )\n};\n\nexport default Users;","import React from \"react\";\nimport {MessageType} from \"../../../../Redux/messagesReducer\";\nimport s from \"./MessageItemStyle.module.scss\"\n\n\ninterface IMessageItem extends MessageType{\n}\nconst MessageItem = (props:IMessageItem) => {\n    return (\n        <div className={s.wrapperMessage} key={props.id}>\n            <div className={s.blockMessage}>\n                <div className={s.photo}>\n\n                </div>\n                <div className={s.text}>\n                <span>\n                {props.message}\n                </span>\n                </div>\n\n            </div>\n        </div>\n    )\n}\nexport default MessageItem;","import React from \"react\";\nimport MessageItem from \"./MessageItem\";\nimport {MessageType} from \"../../../../Redux/messagesReducer\";\n\n\ninterface IListMessages {\n    messageData: MessageType[]\n}\nconst ListMessages = (props: IListMessages) => {\n\n\n    return (\n        <>\n            {props.messageData\n                ? props.messageData.map((elem) => {\n                return <MessageItem message={elem.message}\n                                    id={elem.id}\n                                    key={elem.id}\n                />\n            })\n                : <span>You have no messages</span>\n            }\n        </>\n    )\n}\n\nexport default ListMessages","import React from \"react\";\n\n\nexport const AddMessageForm = () => {\n    return (<>\n            {/*<div className={'allMessages__input'}>*/}\n            {/*    <textarea*/}\n            {/*        onChange={onUpdateMessageText}*/}\n            {/*        value={props.newMessageText}*/}\n            {/*    />*/}\n            {/*</div>*/}\n            {/*<div className={'allMessages__button'}>*/}\n            {/*    <div onClick={onAddMessage} className={'button'}>*/}\n            {/*        <div className={'button__text'}>Send</div>*/}\n            {/*    </div>*/}\n            {/*</div>*/}\n        </>\n    )\n}","import React from \"react\";\nimport ListMessages from \"./ListMessage/ListMessages\";\nimport {MessageType} from \"../../../Redux/messagesReducer\";\nimport {AddMessageForm} from \"./AddMessageForm/AddMessageForm\";\nimport s from \"./DialogStyle.module.scss\"\n\ninterface IDialogProps{\n    messageData:MessageType[]\n    addMessage:(text:string)=>void\n}\nconst Dialog = (props: IDialogProps) => {\n\n    return (\n        <div className={s.wrapperDialog}>\n            <h3 className={s.title}>MESSAGES</h3>\n            <ListMessages messageData={props.messageData}/>\n            <AddMessageForm />\n\n        </div>\n    )\n}\n\nexport default Dialog","import React from \"react\";\nimport Users from \"./Users/Users\";\nimport Dialog from \"./Dialog/Dialog\";\nimport {MessagesStateType} from \"../../Redux/messagesReducer\";\nimport s from \"./MessagesStyle.module.scss\"\n\ninterface IMessagesProps{\n    messagesPage: MessagesStateType\n    addMessage:(text:string)=>void\n}\nconst Messages = (props:IMessagesProps) => {\n    return(\n        <div className={s.wrapperMessages}>\n                <Users arrayUsers={props.messagesPage.arrayUsers} />\n            <div className={s.messages}>\n                <Dialog\n                    messageData={props.messagesPage.messageData}\n                    addMessage = {props.addMessage}\n                />\n            </div>\n        </div>\n    )\n};\n\nexport default Messages;","import React, {ComponentType} from \"react\";\nimport {Navigate, Params, useLocation, useParams} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {StateType} from \"../components/Redux/redux-store\";\nimport {Location} from \"history\";\n\ntype MapStateToPropsType = {\n    isAuth: boolean\n}\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n\n    function RedirectComponent(props: MapStateToPropsType) {\n        let location: Location = useLocation()\n        let params: Params = useParams()\n        let {isAuth, ...restProps} = props\n\n        if (!isAuth) {\n            return <Navigate to={`/login`}/>\n        }\n        return <Component {...restProps as T}\n                          location={location}\n                          router={params}\n        />;\n    }\n\n    let mapStateToPropsAuthRedirect = (state: StateType): MapStateToPropsType => {\n        return {\n            isAuth: state.auth.isAuth\n        }\n    }\n    let ConnectedRedirectComponent = connect<MapStateToPropsType, null, {}, StateType>(mapStateToPropsAuthRedirect)(RedirectComponent)\n\n\n    return ConnectedRedirectComponent\n}\n","import React from \"react\";\nimport {addMessageAC, MessagesStateType} from \"../../Redux/messagesReducer\";\nimport Messages from \"./Messages\";\nimport {connect} from \"react-redux\";\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\nimport {compose, Dispatch} from \"redux\";\nimport {StateType} from \"../../Redux/redux-store\";\n\n\ntype MessagesAPIType = MapStateToPropsType & MapDispatchToPropsType\nclass MessagesContainer extends React.Component<MessagesAPIType>{\n\n    render() {\n        return (<Messages {...this.props} />);\n    }\n}\n\n\ntype MapStateToPropsType = {\n    messagesPage: MessagesStateType\n}\nlet mapStateToProps = (state:StateType):MapStateToPropsType => {\n    return {\n        messagesPage: state.messagesPage,\n    }\n}\n\ntype MapDispatchToPropsType = {\n    addMessage:(message:string)=>void\n}\n\nlet mapDispatchToProps = (dispatch:Dispatch):MapDispatchToPropsType => {\n     return {\n        addMessage: (text) => {\n            dispatch(addMessageAC(text))\n        }\n    }\n}\n\n\n\nexport default compose<React.ComponentType>(\n    connect<MapStateToPropsType,MapDispatchToPropsType,{},StateType>(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(MessagesContainer)\n\n","import React from \"react\";\n\n\n\n\nconst FriendsTitle = () => {\n    return (\n        <div className={'myFriends__title'} >\n            FIND FRIENDS\n        </div>\n    )\n}\n\nexport default FriendsTitle","import React from \"react\";\n\n\n\nconst FriendsFilter = () =>{\n    return (\n        <div className={'myFriends__filter'}>\n\n        </div>\n    )\n}\n\nexport default FriendsFilter","import {subscribeAPI, usersAPI, UserType} from \"../../API/api\";\nimport {Dispatch} from \"redux\";\n\nconst FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = \"SET_USERS\"\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\nconst SET_TOTAL_USERS = 'SET_TOTAL_USERS'\nconst TOGGLE_PRELOADER = 'TOGGLE_PRELOADER'\nconst TOGGLE_FOLLOWING = 'TOGGLE_FOLLOWING'\n\n\nlet initialState = {\n    users: [],\n    totalUsers: 0,\n    pageSize: 10,\n    currentPage: 1,\n    isPreloader: false,\n    isFollowing: []\n}\n\n\nexport type FriendsStateType = {\n    users: Array<UserType>\n    totalUsers: number\n    pageSize: number\n    currentPage: number\n    isPreloader: boolean\n    isFollowing: Array<number>\n}\n\n\nconst friendsReducer = (state: FriendsStateType = initialState, action: actionType): FriendsStateType => {\n    switch (action.type) {\n        case FOLLOW:\n            return {\n                ...state,\n                users: state.users.map((elem: any) => {\n                    if (elem.id === action.id) {\n                        return {\n                            ...elem,\n                            followed: true\n                        }\n                    } else {\n                        return {\n                            ...elem\n                        }\n                    }\n                })\n            }\n        case UNFOLLOW:\n            return {\n                ...state,\n                users: state.users.map((elem: any) => {\n                    if (elem.id === action.id) {\n                        return {...elem, followed: false}\n                    } else {\n                        return {\n                            ...elem\n                        }\n                    }\n                })\n            }\n        case SET_USERS:\n            return {\n                ...state,\n                users: [...action.array]\n            }\n        case SET_CURRENT_PAGE: {\n            return {\n                ...state,\n                currentPage: action.newCurrent\n            }\n        }\n        case SET_TOTAL_USERS: {\n            return {\n                ...state,\n                totalUsers: action.totalUsers\n            }\n        }\n        case TOGGLE_PRELOADER: {\n            return {\n                ...state,\n                isPreloader: action.isPreloader\n            }\n        }\n        case TOGGLE_FOLLOWING: {\n            return {\n                ...state,\n                isFollowing: state.isPreloader\n                    ? [...state.isFollowing, action.id]\n                    : [...state.isFollowing.filter((id) => id !== action.id)]\n            }\n        }\n        default:\n            return state;\n\n    }\n}\n\nexport const getUsersThunkCreator = (currentPage: number, pageSize: number) => {\n    return (dispatch: Dispatch) => {\n        dispatch(togglePreloaderAC(true));\n        usersAPI.getUsers(currentPage, pageSize)\n            .then((response) => {\n                dispatch(setUsersAC(response.items));\n                dispatch(totalUsersAC(response.totalCount));\n                dispatch(togglePreloaderAC(false));\n            });\n    }\n}\nexport const changePageThunkCreator = (newCurrentPage: number, pageSize: number) => {\n    return (dispatch: Dispatch) => {\n        dispatch(newPageAC(newCurrentPage));\n        dispatch(togglePreloaderAC(true));\n        usersAPI.getUsers(newCurrentPage, pageSize)\n            .then((response) => {\n\n                dispatch(setUsersAC(response.items));\n                dispatch(togglePreloaderAC(false));\n            });\n    }\n}\n\nexport const followThunkCreator = (id: number) => {\n    return (dispatch: Dispatch) => {\n        dispatch(togglePreloaderAC(true));\n        dispatch(toggleFollowingAC(id))\n        subscribeAPI.follow(id)\n            .then((data) => {\n                if (data.resultCode === 0) {\n                    dispatch(followAC(id))\n                }\n                dispatch(togglePreloaderAC(false))\n                dispatch(toggleFollowingAC(id))\n            })\n\n\n    }\n}\nexport const unfollowThunkCreator = (id: number) => {\n    return (dispatch: Dispatch) => {\n        dispatch(togglePreloaderAC(true));\n        dispatch(toggleFollowingAC(id))\n        subscribeAPI.unfollow(id)\n            .then((data) => {\n                if (data.resultCode === 0) {\n                    dispatch(unFollowAC(id))\n                }\n                dispatch(togglePreloaderAC(false))\n                dispatch(toggleFollowingAC(id))\n            })\n    }\n}\n\ntype actionType =\n    ToggleFollowinACType |\n    TogglePreloaderType |\n    TotalUserACType |\n    NewPageACType |\n    FollowACType |\n    UnFollowACType |\n    SetUsersACType\n\n\ntype ToggleFollowinACType = { type: typeof TOGGLE_FOLLOWING, id: number }\nexport const toggleFollowingAC = (id: number): ToggleFollowinACType => {\n    return {\n        type: TOGGLE_FOLLOWING,\n        id: id\n    }\n}\n\ntype TogglePreloaderType = { type: typeof TOGGLE_PRELOADER, isPreloader: boolean }\nexport const togglePreloaderAC = (actionPreloader: boolean): TogglePreloaderType => {\n    return {\n        type: TOGGLE_PRELOADER,\n        isPreloader: actionPreloader\n    }\n}\n\ntype TotalUserACType = { type: typeof SET_TOTAL_USERS, totalUsers: number }\nexport const totalUsersAC = (totalUsers: number): TotalUserACType => {\n    return {\n        type: SET_TOTAL_USERS,\n        totalUsers: totalUsers\n    }\n}\n\ntype NewPageACType = { type: typeof SET_CURRENT_PAGE, newCurrent: number }\nexport const newPageAC = (newCurrent: number): NewPageACType => {\n    return {\n        type: SET_CURRENT_PAGE,\n        newCurrent: newCurrent\n    }\n}\n\ntype FollowACType = { type: typeof FOLLOW, id: number }\nexport const followAC = (userID: number): FollowACType => {\n    return {\n        type: FOLLOW,\n        id: userID\n    }\n}\n\ntype UnFollowACType = { type: typeof UNFOLLOW, id: number }\nexport const unFollowAC = (userID: number): UnFollowACType => {\n    return {\n        type: UNFOLLOW,\n        id: userID\n    }\n}\n\ntype SetUsersACType = { type: typeof SET_USERS, array: Array<UserType> }\nexport const setUsersAC = (newArrayUsers: Array<UserType>): SetUsersACType => {\n    return {\n        type: SET_USERS,\n        array: newArrayUsers\n    }\n}\n\nexport default friendsReducer;","import React from \"react\";\nimport userPhoto from \"../../../../../img/user/user.png\"\nimport {NavLink} from \"react-router-dom\";\nimport {UserType} from \"../../../../../API/api\";\n\ntype FriendsItemType = {\n    user:UserType\n    follow: (id:number) => void\n    unfollow: (id:number) => void\n    isPreloader: boolean\n    isFollowing:Array<number>\n}\nconst FriendsItem = (props:FriendsItemType) => {\n    const onUnfollow = () => {\n        props.unfollow(props.user.id)\n    }\n    const onFollow = () => {\n        props.follow(props.user.id)\n    }\n    const checkDisable:boolean =  props.isFollowing.some((id:number) => id === props.user.id)\n\n\n\n    return (\n        <div className={'blockFriend'}>\n            <NavLink to={`/profile/${props.user.id}`}>\n                <div className={'blockFriend__photo'}>\n                    <img alt={'userPhoto'} src={props.user.photos.small !== null ? props.user.photos.small : userPhoto}/>\n                </div>\n            </NavLink>\n            <div className={'blockFriend__description'}>\n                <div className={'description__name'}>{props.user.name} </div>\n                <div className={'description__stat'}>{props.user.status}</div>\n                <div className={'description__country'}>Country</div>\n                <div className={'description__city'}>City</div>\n            </div>\n            <div className={'blockFriend__button'}>\n                {props.user.followed ?\n                    <div   className={'buttonAdd'}>\n                        <button onClick={onUnfollow} disabled={checkDisable} >UNFOLLOW</button>\n                    </div>\n                    :\n                    <div  className={'buttonAdd'}>\n                        <button onClick={onFollow} disabled={checkDisable}  >FOLLOW</button>\n                    </div>}\n            </div>\n        </div>\n    )\n}\nexport default FriendsItem","import React from \"react\";\n\n\nconst Preloader = () => {\n    return (\n        <div className={'preloader'}>\n            <div className={'preloader__text'}>LOADING</div>\n        </div>\n    )\n}\nexport default Preloader","import React from \"react\";\n\n\ntype PagesSwitcherPropsType = {\n    arrayCount: Array<number>\n    currentPage: number\n    pagesCount: number\n    onCurrentPage: (newCurrentPage: number) => void\n\n}\nexport const PagesSwitcher = (props: PagesSwitcherPropsType) => {\n\n\n    return (\n        <>\n\n            {\n                props.arrayCount\n                    .filter((elem: number) => {\n                        if (elem + 2 >= props.currentPage && elem - 2 <= props.currentPage) {\n                            return true\n                        } else return elem === 1 || elem === props.pagesCount;\n                    }).map((elem: number, index: number) => {\n                    if (props.currentPage >= 4) {\n                        if (elem === props.currentPage - 2 || elem === props.currentPage + 2) {\n                            if (elem !== props.pagesCount) {\n                                elem = 0\n                            }\n                        }\n                    }\n                    return (\n                        <div key={index}>\n                            {elem === 0\n                                ? <span>....</span>\n                                :\n                                <span key={index} className={props.currentPage === elem ? \"activePage\" : 'disabledPage'}\n                                      onClick={() => {\n                                          props.onCurrentPage(elem)\n                                      }}>{elem}</span>\n                            }\n                        </div>\n                    )\n                })}\n        </>\n    )\n}","import React from \"react\";\nimport FriendsItem from \"./FriendsItem/FriendsItem\";\nimport Preloader from \"../../../Preloader/Preloader\";\nimport {FriendsStateType} from \"../../../Redux/friendsReducer\";\nimport {UserType} from \"../../../../API/api\";\nimport {PagesSwitcher} from \"./FriendsItem/PagesSwitcher\";\n\ntype FriendListType = {\n    friendsPage: FriendsStateType\n    arrayCount: Array<number>\n    pagesCount: number\n    getUsers: (currentPage: number, pageSize: number) => void\n    changePage: (newCurrentPage: number, pageSize: number) => void\n    follow: (id: number) => void\n    unfollow: (id: number) => void\n    onCurrentPage: (newCurrentPage: number) => void\n    currentPage: number\n\n}\nlet FriendList = (props: FriendListType) => {\n\n\n    return (\n        <>\n            <div className={'myFriends__list'}>\n                {props.friendsPage.isPreloader ? <Preloader/> : undefined}\n                <div className={\"pages\"}>\n                    <PagesSwitcher currentPage={props.currentPage}\n                                   arrayCount={props.arrayCount}\n                                   pagesCount={props.pagesCount}\n                                   onCurrentPage={props.onCurrentPage}\n                    />\n                </div>\n                {props.friendsPage.users.map((elem: UserType) => {\n                    return <FriendsItem user={elem}\n                                        key={elem.id}\n                                        follow={props.follow}\n                                        unfollow={props.unfollow}\n                                        isFollowing={props.friendsPage.isFollowing}\n                                        isPreloader={props.friendsPage.isPreloader}\n                    />\n                })\n                }\n            </div>\n        </>\n    )\n}\n\nexport default FriendList","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {\n    changePageThunkCreator,\n    followThunkCreator,\n    FriendsStateType,\n    getUsersThunkCreator,\n    unfollowThunkCreator\n} from \"../../../Redux/friendsReducer\";\nimport FriendList from \"./FriendList\";\nimport {ThunkDispatch} from \"redux-thunk\";\nimport {StateType} from \"../../../Redux/redux-store\";\nimport {compose} from \"redux\";\n\n\ntype FriendsList = MapDispatchToPropsType & MapStateToPropsType\nclass FriendListContainer extends React.Component<FriendsList> {\n    componentDidMount() {\n        this.props.getUsers(this.props.friendsPage.currentPage, this.props.friendsPage.pageSize)\n    }\n    onCurrentPage = (newCurrentPage: number) => {\n\n        this.props.changePage(newCurrentPage, this.props.friendsPage.pageSize)\n    }\n\n\n    render() {\n        let pagesCount = Math.ceil(this.props.friendsPage.totalUsers / this.props.friendsPage.pageSize);\n        let arrayCount = [];\n        for (let i = 1; i <= pagesCount; i++) {\n            arrayCount.push(i)\n        }\n\n\n        return (\n            <FriendList arrayCount={arrayCount}\n                        pagesCount={pagesCount}\n                        onCurrentPage={this.onCurrentPage}\n                        {...this.props}\n                        currentPage={this.props.friendsPage.currentPage}\n\n            />\n        )\n    }\n}\n\n\ntype MapStateToPropsType = {\n    friendsPage: FriendsStateType\n}\nlet mapStateToProps = (state: StateType):MapStateToPropsType => {\n    return {\n        friendsPage:state.friendsPage,\n    }\n}\n\n\ntype MapDispatchToPropsType = {\n    getUsers: (currentPage:number,pageSize:number) => void\n    changePage: (newCurrentPage:number,pageSize:number) => void\n    follow: (id:number) => void\n    unfollow: (id:number) => void\n}\nlet mapDispatchToProps = (dispatch: ThunkDispatch<any, any, any>):MapDispatchToPropsType => {\n    return {\n        getUsers: (currentPage: number, pageSize: number) => {\n            dispatch(getUsersThunkCreator(currentPage, pageSize))\n        },\n        changePage: (newCurrentPage: number, pageSize: number) => {\n            dispatch(changePageThunkCreator(newCurrentPage, pageSize))\n        },\n        follow: (id:number) => {\n            dispatch(followThunkCreator(id))\n        },\n        unfollow: (id:number) => {\n            dispatch(unfollowThunkCreator(id))\n        }\n    }\n}\n\n\n\n\n\n\nexport default compose<React.ComponentType>(\n    connect<MapStateToPropsType,MapDispatchToPropsType,{},StateType>(mapStateToProps, mapDispatchToProps)\n)(FriendListContainer)","import React from \"react\";\nimport FriendsTitle from \"./FriendsTitle/FriendsTitle\";\nimport FriendsFilter from \"./FriendFilter/FriendsFilter\";\nimport FriendsListContainer from \"./FriendsList/FriendListContainer\";\n\n\n\nconst Friends = () =>{\n    return(\n        <div className={'myFriends'}>\n            <FriendsTitle />\n            <FriendsListContainer/>\n            <FriendsFilter />\n        </div>\n\n    )\n}\n\nexport default Friends","import React, {ChangeEvent} from \"react\";\nimport userPhoto from \"../../../../../img/user/user.png\";\nimport s from './ProfilePhoto.module.scss'\n\n\ntype ProfilePhotoPropsType = {\n    photos: { small: null | string, large: null | string }\n    ownerId: number\n    uploadProfilePhoto: (photo: File, ownerId: number) => void\n    isOwner: boolean\n}\nexport const ProfilePhoto = (props: ProfilePhotoPropsType) => {\n\n\n    const test = (e: ChangeEvent<HTMLInputElement>) => {\n        props.uploadProfilePhoto(e.currentTarget.files![0], props.ownerId)\n\n    }\n\n    return (\n        <div className={s.wrapperPhoto}>\n            <img alt={'userPhoto'} src={props.photos.large === null ? userPhoto : props.photos.large}/>\n            {props.isOwner &&\n                <div className={s.wrapperInputPhoto}>\n                    <label className={s.uploadPhotoText}>Upload photo</label>\n                    <input className={s.inputProfilePhoto}\n                           title={'Upload profile photo'}\n                           type={'file'}\n                           onChange={test}\n                           name={'profilePhoto'}\n                    />\n\n                </div>}\n\n        </div>\n    )\n}","import React from \"react\";\nimport s from './StatusWithoutEdit.module.scss'\n\ntype StatusWithoutEditPropsType = {\n    status:string | undefined\n    activateEditMode:()=>void\n}\nexport const StatusWithoutEdit = (props:StatusWithoutEditPropsType) => {\n  return(\n      <div className={s.wrapperStatus} >\n          <span className={s.title}>Status:</span>\n          {props.status\n              ? <span className={s.statusText}  onClick={props.activateEditMode}>{props.status}</span>\n              : <span className={s.statusText} onClick={props.activateEditMode} style={{color: \"gray\"}} >{'write your status here'}</span>\n          }\n      </div>\n  )\n}","import React, {ChangeEvent} from \"react\";\n\ntype StatusWithEditModePropsType = {\n    onChangeStatus:(e:ChangeEvent<HTMLInputElement>)=>void\n    deactivateEditMode:()=>void\n    status:string | undefined\n    localStatus:string\n}\nexport const StatusWithEditMode = (props:StatusWithEditModePropsType) => {\n\n    return(\n        <div>\n            <input onChange={props.onChangeStatus} value={props.localStatus} autoFocus={true}\n                   onBlur={props.deactivateEditMode} placeholder={props.status ? props.status : 'Write your status'} defaultValue={props.status}/>\n        </div>\n    )\n}","import React, {ChangeEvent} from \"react\";\nimport {StatusWithoutEdit} from \"./StatusWithoutEdit/StatusWithoutEdit\";\nimport {StatusWithEditMode} from \"./StatusWithEditMode/StatusWithEditMode\";\n\ntype LocalStateType = {\n    editMode: boolean\n    status: string\n}\ntype ProfileStatusType = {\n    status: string | undefined\n    updateStatus: (status: string) => void\n    isOwner: boolean\n}\n\nclass ProfileStatus extends React.Component<ProfileStatusType, LocalStateType> {\n    state: LocalStateType = {\n        editMode: false,\n        status: this.props.status ? this.props.status : ''\n    }\n\n    activateEditMode = () => {\n        this.props.isOwner\n            ? this.setState({\n                editMode: true\n            })\n            : alert('Ты не можешь менять чужие сообщения')\n    }\n    deactivateEditMode = () => {\n        this.setState({\n            editMode: false\n        })\n        this.props.updateStatus(this.state.status)\n    }\n    onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            status: e.currentTarget.value\n        })\n    }\n\n    componentDidUpdate(prevProps: Readonly<ProfileStatusType>, prevState: Readonly<LocalStateType>, snapshot?: any) {\n        if (this.props.status !== prevProps.status) {\n            this.setState({\n                status: this.props.status ? this.props.status : ''\n            })\n        }\n    }\n\n    render() {\n        return (\n            <>\n                {!this.state.editMode\n                    ? <StatusWithoutEdit status={this.props.status}\n                                         activateEditMode={this.activateEditMode}\n\n                    />\n                    : <StatusWithEditMode localStatus={this.state.status}\n                                          onChangeStatus={this.onChangeStatus}\n                                          deactivateEditMode={this.deactivateEditMode}\n                                          status={this.props.status}\n\n                    />\n                }\n            </>\n        )\n    }\n}\n\nexport default ProfileStatus","import React from \"react\";\nimport {ProfileType} from \"../../../../../Redux/profileReducer\";\nimport s from './FullInfo.module.scss'\n\n\ntype FullInfoPropsType = {\n    profile: ProfileType\n}\nexport const FullInfo = (props: FullInfoPropsType) => {\n    let listContacts = Object.entries(props.profile.contacts).map((elem, index) => {\n        return (\n            <div key={index} className={s.itemContacts}>\n                <span className={s.titleItem}>{elem[0]}:</span>\n                {elem[1]\n                    ? <a href={elem[1]} className={s.descriptionItem}>{elem[1]}</a>\n                    : <span className={s.descriptionItem} >-</span>\n                }\n            </div>\n        )\n    })\n    return (\n\n        <div className={s.wrapperFullInfo}>\n            <div className={s.itemProfileInfo}>\n                <span className={s.titleItem}>Full name:</span>\n                <span className={s.descriptionItem}>{props.profile.fullName}</span>\n            </div>\n            <div className={s.itemProfileInfo}>\n                <span className={s.titleItem}>Looking for a job:</span>\n                <span className={s.descriptionItem}>{props.profile.lookingForAJob ? 'Yes' : 'No' }</span>\n            </div>\n            <div className={s.itemProfileInfo}>\n                <span className={s.titleItem}>Contacts:</span>\n                {listContacts}\n            </div>\n        </div>\n    )\n}","import React from \"react\";\nimport {UseFormRegister} from \"react-hook-form/dist/types/form\";\nimport {Input, Test} from \"./EditProfileForm\";\n\n\ntype ContactsType = \"contacts.facebook\" | \"contacts.vk\" | \"contacts.mainLink\"\n    | \"contacts.github\" | \"contacts.twitter\" | \"contacts.youtube\" | \"contacts.instagram\" | \"contacts.website\"\ntype EditContactsFormPropsType = {\n    contacts: Test\n    register: UseFormRegister<Input>\n}\nexport const EditContactsForm = (props: EditContactsFormPropsType) => {\n    let listInputsContacts = Object.entries(props.contacts).map(contact => {\n        let [key, value] = contact\n        key = 'contacts.' + key\n        let name: ContactsType = key as ContactsType\n        let [contacts, label] = key.split('.')\n\n        return (\n            <>\n                <label>{label}</label>\n                <input defaultValue={value ? value : ''} {...props.register(name as ContactsType)} />\n            </>\n        )\n\n    })\n    return (\n        <>\n            <label>Contacts:</label>\n            {listInputsContacts}\n        </>\n    )\n}","import React, {useState} from \"react\";\nimport {SubmitHandler, useForm} from \"react-hook-form\";\nimport s from './EditProfuleForm.module.scss'\nimport {ProfileType} from \"../../../../../Redux/profileReducer\";\nimport {EditProfileType} from \"../../../../../../API/api\";\nimport {EditContactsForm} from \"./EditContactsForm\";\n\nexport type Test = {\n\n    facebook?: null | string\n    github?: null | string\n    instagram?: null | string\n    mainLink?: null | string\n    twitter?: null | string\n    vk?: null | string\n    website?: null | string\n    youtube?: null | string\n\n}\n\n\nexport type Input = {\n    userId: number\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    fullName: string\n    aboutMe: string\n    contacts: {\n        facebook: string\n        github: string\n        instagram: string\n        mainLink: string\n        twitter: string\n        vk: string\n        website: string\n        youtube: string\n    }\n    photos: {\n        large: string,\n        small: string,\n    }\n}\ntype EditProfileFormPropsType = {\n    toggleEditMode: () => void\n    profile: ProfileType\n    ownerID: number\n    editProfile: (profile: EditProfileType, ownerId: number) => void\n}\nexport const EditProfileForm = (props: EditProfileFormPropsType) => {\n    const {register, handleSubmit, watch, formState: {errors}} = useForm<Input>();\n    const onSubmit: SubmitHandler<Input> = data => {\n        console.log(data)\n        data.userId = props.ownerID\n        props.editProfile(data, data.userId)\n        props.toggleEditMode()\n    };\n\n    const [localLookingForAJob, setLocalLookingForAJob] = useState<boolean>(props.profile.lookingForAJob)\n    const changeStateLookingForAJob = () => {\n        setLocalLookingForAJob(!localLookingForAJob)\n    }\n\n    return (\n        <form className={s.wrapperEditProfile} onSubmit={handleSubmit(onSubmit)}>\n            <label>FullName:</label>\n            <input type={'text'} defaultValue={props.profile.fullName} {...register('fullName', {required: true})}/>\n            <label>About me:</label>\n            <textarea\n                defaultValue={props.profile.aboutMe ? props.profile.aboutMe : ''}  {...register('aboutMe', {required: true})}/>\n            <div className={s.wrapperInputCheckBox} onClick={changeStateLookingForAJob}>\n                <label>JOB</label>\n                <input type={'checkbox'} checked={localLookingForAJob} {...register('lookingForAJob')} />\n            </div>\n            <input\n                defaultValue={props.profile.lookingForAJobDescription ? props.profile.lookingForAJobDescription : ''}\n                {...register('lookingForAJobDescription', {required: true})} />\n            <EditContactsForm contacts={props.profile.contacts}\n                              register={register}\n            />\n            <input type={'submit'}/>\n\n        </form>\n    )\n}","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\nimport s from './SuperButton.module.scss'\n\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\n\ntype SuperButtonPropsType = DefaultButtonPropsType & {\n    red?: boolean\n    textButton?:string\n}\n\nconst SuperButton: React.FC<SuperButtonPropsType> = (\n    {\n        red, className,\n        textButton, onClick,\n        ...restProps\n    }\n) => {\n\n\n    const finalClassName = `${className} ${red \n        ? restProps.disabled ? s.redDis: s.red  \n        : restProps.disabled ? s.wrapperButtonDis : s.wrapperButton} `\n    const finalButton = `${restProps.disabled ? s.defaultDis : s.default } ${textButton}`\n    const onClickHandler = (e:any) => {\n        onClick && onClick(e)\n    }\n\n    return (\n        <div className={finalClassName} onClick={onClickHandler}>\n            <button\n                className={finalButton}\n                {...restProps}\n            />\n        </div>\n    )\n}\n\nexport default SuperButton\n","import React, {useState} from \"react\";\nimport {ProfileType} from \"../../../../Redux/profileReducer\";\nimport ProfileStatus from \"./ProfileStatus/ProfileStatus\";\nimport {FullInfo} from \"./FullInfo/FullInfo\";\nimport s from './ProfileDescription.module.scss'\nimport {EditProfileForm} from \"./EditProfileForm/EditProfileForm\";\nimport SuperButton from \"../../../../../SuperComponents/c2-SuperButton/SuperButton\";\nimport {EditProfileType} from \"../../../../../API/api\";\n\n\ntype AboutProfilePropsType = {\n    profile: ProfileType\n    status: string | undefined\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    ownerID: number\n    editProfile: (profile: EditProfileType, ownerId: number) => void\n}\nexport const ProfileDescription = (props: AboutProfilePropsType) => {\n    let [collapsed, setCollapsed] = useState(false)\n    const toggleCollapsed = () => {\n        setCollapsed(!collapsed)\n    }\n    let [editProfileMode, setEditProfileMode] = useState(false)\n\n    const toggleEditMode = () => {\n        setEditProfileMode(!editProfileMode)\n    }\n\n    const myName = props.profile!.fullName.split(' ').map((elem: string) => {\n        let newElem = elem.split('')\n        newElem[0] = newElem[0].toUpperCase()\n        return newElem.join('')\n    }).join(' ')\n\n    return (\n        <div className={s.wrapperDescription}>\n            <div className={s.headerDescription}>\n                <span className={s.profileName}>{myName}</span>\n                {props.isOwner && <span onClick={toggleEditMode} className={s.profileEdit}>Edit profile</span>}\n            </div>\n            {editProfileMode\n                ? <EditProfileForm toggleEditMode={toggleEditMode}\n                                   profile={props.profile}\n                                   ownerID={props.ownerID}\n                                   editProfile={props.editProfile}\n                />\n                : <>\n                    <ProfileStatus status={props.status}\n                                   updateStatus={props.updateStatus}\n                                   isOwner={props.isOwner}\n                    />\n                    <div className={s.itemProfileInfo}>\n                        <span className={s.titleItem}>About me:</span>\n                        <span className={s.descriptionItem}>{props.profile.aboutMe ? props.profile.aboutMe : '-'}</span>\n                    </div>\n                    <div className={s.itemProfileInfo}>\n                        <span className={s.titleItem}>Looking for a job:</span>\n                        <span className={s.descriptionItem}>{props.profile.lookingForAJobDescription ? props.profile.lookingForAJobDescription : '-'}</span>\n                    </div>\n                    {collapsed && <FullInfo profile={props.profile}/>}\n                    <SuperButton onClick={toggleCollapsed}>More info</SuperButton>\n                </>\n            }\n\n        </div>\n    )\n}","import React, {useState} from \"react\";\nimport Preloader from \"../../../Preloader/Preloader\";\nimport {ProfileType} from \"../../../Redux/profileReducer\";\nimport {ProfilePhoto} from \"./ProfilePhoto/ProfilePhoto\";\nimport {ProfileDescription} from \"./ProfileDescription/ProfileDescription\";\nimport {EditProfileType} from \"../../../../API/api\";\nimport s from './ProfileInfo.module.scss'\n\n\ntype ProfileInfoProps = {\n    profile: ProfileType | null,\n    status: string | undefined\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    ownerID: number\n    editProfile: (profile: EditProfileType, ownerId: number) => void\n    uploadProfilePhoto:(photo:File,ownerId:number)=>void\n}\nconst ProfileInfo = (props: ProfileInfoProps) => {\n    if (props.profile !== null) {\n        return (\n            <div className={s.wrapperProfile}>\n                <ProfilePhoto photos={props.profile.photos}\n                              ownerId={props.ownerID}\n                              uploadProfilePhoto={props.uploadProfilePhoto}\n                              isOwner={props.isOwner}\n                />\n                <ProfileDescription profile={props.profile}\n                                    status={props.status}\n                                    updateStatus={props.updateStatus}\n                                    isOwner={props.isOwner}\n                                    ownerID={props.ownerID}\n                                    editProfile={props.editProfile}\n\n                />\n            </div>\n        )\n    } else {\n        return <Preloader/>\n    }\n\n\n}\n\nexport default ProfileInfo;","import React from \"react\";\n\n\nconst AddPosts: any = (props: any) => {\n    let textAreaPost: any = React.createRef();\n\n    let onPostChange: any = () => {\n        let text: any = textAreaPost.current.value\n        props.postChange(text)\n\n    }\n\n    let onAddPost: any = () => {\n        if (props.newPostText.trim() === '' || props.newPostText.trim() === ' ') {\n            alert('Пустое сообщение')\n        } else {\n            props.addPost()\n        }\n\n    }\n\n\n    return (\n        <div className={'addPosts'}>\n\n\n            <div className={'addPosts__input'}>\n                <textarea ref={textAreaPost}\n                          placeholder={\"Tell me your news...\"}\n                          onChange={onPostChange}\n                          value={props.newPostText}\n                />\n            </div>\n\n\n            <div className={'addPosts__button'}>\n                <div onClick={onAddPost} className={'button'}>\n                    <div className={'button__text'}>Send</div>\n                </div>\n            </div>\n\n\n        </div>\n    )\n};\n\nexport default AddPosts;","import React from \"react\";\nimport user from './../../../../../img/user/user.png'\n\nconst AddedPostsItem:any = (props:any) =>{\n\n    let likeArea:any = React.createRef()\n\n    let onAddLike:any = () => {\n    let idMessage = Number(likeArea.currentTarget.id);\n    props.addLike(idMessage)\n    }\n\n    return(\n        <div className={'posts__item'}>\n            <div className={'patternPosts'}>\n                <img alt={'userPhoto'} className={'patternPosts__photo'} src={user}/>\n                <div className={'patternPosts__text'}>{props.news}</div>\n                <div ref={likeArea} id={props.id} onClick={onAddLike} className={'patternPosts__like'}>like: {props.like}</div>\n            </div>\n        </div>\n    )\n}\n\n\nexport default AddedPostsItem;","import React from \"react\";\nimport AddedPostsItem from \"./AddedPostsItem\";\n\n\n\n\nconst AddedPostsArray:any = (props:any) => {\n    let dialogsComponent:React.ReactNode = props.postsData.map((elem:any) => {\n        return  <AddedPostsItem news = {elem.news}\n                                like = {elem.likeCount}\n                                id={elem.id}\n                                addLike = {props.addLike}\n                                key = {elem.id}\n\n        />\n    });\n\n    return(\n        <div className={'addedPosts'}>\n        {dialogsComponent}\n        </div>\n    )\n}\n\nexport default AddedPostsArray\n","import React from \"react\";\n\n\n\nconst PostsTitle = () => {\n    return(\n        <div className={'posts__title'}>\n            My posts\n        </div>\n    )\n\n}\n\nexport default PostsTitle;","import React from \"react\";\nimport AddPosts from \"./AddPosts/AddPosts\";\nimport AddedPostsArray from \"./AddedPosts/AddedPostsArray\";\nimport PostsTitle from \"./PostsTitile/PostsTitle\";\n\n\nconst Posts:any = (props:any) => {\n\n    return (\n        <div className={'posts'}>\n\n            {/*posts__title BOTTOM*/}\n            <PostsTitle />\n            {/*posts__title UP*/}\n\n\n            <AddPosts newPostText = {props.profilePage.newPostText}\n                      postChange = {props.postChange}\n                      addPost = {props.addPost}\n            />\n\n\n            {/*class posts__item*/}\n            <AddedPostsArray postsData={props.profilePage.postsData}\n                             addLike = {props.addLike}\n            />\n            {/*class posts__item*/}\n\n        </div>\n    )\n\n}\n\nexport default Posts;","import React from \"react\";\nimport {addLikeActionCreator, newPostAddActionCreator, newPostTextActionCreator} from \"../../../Redux/profileReducer\";\nimport Posts from \"./Posts\";\nimport {connect} from \"react-redux\";\nimport {Dispatch} from \"redux\";\nimport {StateType} from \"../../../Redux/redux-store\";\n\n\nlet mapStateToProps = (state:StateType) => {\n    return {\n        profilePage: state.profilePage\n    }\n}\n\n\ntype MapDispatchToPropsType = {\n    addLike: (idMessage:number)=> void\n    addPost: () => void\n    postChange: (text:string) => void\n}\nlet mapDispatchToProps = (dispatch:Dispatch):MapDispatchToPropsType => {\n    return {\n        addLike: (idMessage) => {\n            dispatch(addLikeActionCreator(idMessage))\n        },\n        addPost: () => {\n            dispatch(newPostAddActionCreator())\n        },\n        postChange: (text) => {\n            dispatch(newPostTextActionCreator(text))\n        }\n    }\n}\n\n\nconst PostsContainer = connect(mapStateToProps,mapDispatchToProps)(Posts)\n\n\n\nexport default PostsContainer;","import React from \"react\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport PostsContainer from \"./Posts/PostsContainer\";\nimport {ProfileType} from \"../../Redux/profileReducer\";\nimport {EditProfileType} from \"../../../API/api\";\n\n\ntype PropsProfileType = {\n    profile: ProfileType | null\n    status: string | undefined\n    updateStatus: (status:string)=> void\n    isOwner:boolean\n    ownerID:number\n    editProfile:(profile:EditProfileType,ownerId:number)=>void\n    uploadProfilePhoto:(photo:File,ownerId:number)=>void\n}\n\nconst Profile = (props:PropsProfileType) => {\n    return (\n        <div className={'content'}>\n            <ProfileInfo {...props} />\n            <PostsContainer/>\n        </div>\n    )\n};\n\n\nexport default Profile;","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport Profile from \"./Profile\";\nimport {\n    editProfileTC,\n    ownerCheckAC,\n    ProfileType,\n    setProfileTC,\n    setStatusTC,\n    updateStatusTC, uploadProfilePhotoTC\n} from \"../../Redux/profileReducer\";\nimport {Params} from \"react-router-dom\";\nimport {StateType} from \"../../Redux/redux-store\";\nimport {ThunkDispatch} from \"redux-thunk\";\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\nimport {Location} from \"history\";\nimport {compose} from \"redux\";\nimport {EditProfileType} from \"../../../API/api\";\n\nexport type ProfilePropsType = mapDispatchToPropsType & mapStateToPropsType & { router: Params, location: Location }\ntype LocalStateType = {\n    userId: Location\n}\n\nclass ProfileContainer extends React.Component<ProfilePropsType, LocalStateType> {\n    state: LocalStateType = {\n        userId: this.props.location\n    }\n\n    componentDidMount() {\n        this.props.getProfile(+this.props.router.userId!)\n        this.props.setStatus(+this.props.router.userId!)\n        this.props.ownerCheckAC(+this.props.router.userId!, this.props.ownerID)\n    }\n\n    componentDidUpdate(prevProps: Readonly<ProfilePropsType>, prevState: Readonly<{}>, snapshot?: any) {\n        if (prevProps.location !== this.props.location) {\n            this.props.getProfile(+this.props.router.userId!)\n            this.props.setStatus(+this.props.router.userId!)\n            this.props.ownerCheckAC(+this.props.router.userId!, this.props.ownerID)\n        }\n\n    }\n\n    render() {\n        return (<Profile profile={this.props.profile}\n                         status={this.props.status}\n                         updateStatus={this.props.updateStatus}\n                         isOwner={this.props.isOwner}\n                         ownerID={this.props.ownerID!}\n                         editProfile={this.props.editProfile}\n                         uploadProfilePhoto={this.props.uploadProfilePhoto}\n            />\n        )\n    }\n}\n\n\ntype mapStateToPropsType = {\n    profile: ProfileType | null\n    status: string | undefined\n    isOwner: boolean\n    ownerID: number | null\n}\nlet mapStateToProps = (state: StateType): mapStateToPropsType => {\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        isOwner: state.profilePage.isOwner,\n        ownerID: state.auth.id\n    }\n}\n\n\ntype mapDispatchToPropsType = {\n    getProfile: (userID: number) => void\n    setStatus: (userID: number) => void\n    updateStatus: (status: string) => void\n    ownerCheckAC: (urlProfileID: number, ownerID: number | null) => void\n    editProfile:(profile:EditProfileType,ownerId:number)=>void\n    uploadProfilePhoto:(photo:File,ownerId:number)=>void\n}\nlet mapDispatchToProps = (dispatch: ThunkDispatch<any, any, any>): mapDispatchToPropsType => {\n    return {\n        getProfile: (userID) => {\n            dispatch(setProfileTC(userID))\n        },\n        setStatus: (userID) => {\n            dispatch(setStatusTC(userID))\n        },\n        updateStatus: (status) => {\n            dispatch(updateStatusTC(status))\n        },\n        ownerCheckAC: (urlProfileID, ownerID) => {\n            dispatch(ownerCheckAC(urlProfileID, ownerID))\n        },\n        editProfile:(profile,ownerId) => {\n            dispatch(editProfileTC(profile,ownerId))\n        },\n        uploadProfilePhoto:(photo,ownerId)=>{\n            dispatch(uploadProfilePhotoTC(photo,ownerId))\n        }\n\n    }\n}\n\n\n\nexport default compose<React.ComponentType>(\n    connect<mapStateToPropsType, mapDispatchToPropsType, {}, StateType>(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(ProfileContainer)\n\n\n\n\n\n\n\n\n\n\n","import React from \"react\";\nimport s from \"./LoginStyle.module.scss\";\nimport {SubmitHandler, useForm} from \"react-hook-form\";\nimport {LoginDataRequestType} from \"../../Redux/authReducer\";\nimport {Navigate} from \"react-router-dom\";\nimport Preloader from \"../../Preloader/Preloader\";\n\ntype Inputs = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha?: boolean\n\n};\ntype LoginFormPropsType = {\n    login: (loginData: LoginDataRequestType) => void\n    isFetching: boolean\n    isAuth: boolean\n    id:number | null\n    toggleError:(stateError:boolean)=>void\n    authError:boolean\n}\n\nexport const LoginForm = (props: LoginFormPropsType) => {\n    const {register, handleSubmit, formState: {errors}} = useForm<Inputs>()\n\n\n    const checkChanged = () => {\n      props.toggleError(false)\n    }\n\n    const onSubmit: SubmitHandler<Inputs> = (data) => {\n        props.login(data)\n    };\n    if (props.isAuth) {\n        return <Navigate to={`/profile/${props.id}`}/>\n    }\n    return (\n        <>\n            {props.isFetching\n                ? <Preloader />\n                : <form className={s.formWrapper} onSubmit={handleSubmit(onSubmit)}>\n                    <label>Login</label>\n                    <input onClick={checkChanged} placeholder={'Login'} className={s.input}\n                           defaultValue={''} {...register('email', {required: true})}/>\n                    {errors.email && <span>This field is required</span>}\n                    <label>Password</label>\n                    <input onClick={checkChanged} className={s.input} placeholder={'Password'} type={'password'} {...register('password', {required: true})} />\n                    {errors.password && <span>This field is required</span>}\n                    <div className={s.checkBox}>\n                        <input type={'checkbox'} {...register('rememberMe')} />\n                        <span>remember me</span>\n                    </div>\n                    {props.authError && <span style={{color:'red'}}>Email or password is wrong</span>}\n                    <input type={'submit'}/>\n                </form>\n            }\n\n        </>\n    )\n}","import React from \"react\";\nimport {LoginForm} from \"./LoginForm\";\nimport {LoginDataRequestType} from \"../../Redux/authReducer\";\n\ntype LoginPropsType = {\n    login: (loginData: LoginDataRequestType) => void\n    isFetching: boolean\n    isAuth: boolean\n    id:number | null\n    toggleError:(stateError:boolean)=>void\n    authError:boolean\n}\nconst Login = (props: LoginPropsType) => {\n\n    return (\n        <div>\n            <h1> LOG IN PAGE</h1>\n            <LoginForm login={props.login}\n                       isFetching={props.isFetching}\n                       isAuth={props.isAuth}\n                       id={props.id}\n                       toggleError={props.toggleError}\n                       authError={props.authError}\n            />\n        </div>\n    )\n}\n\nexport default Login","import React from \"react\";\nimport Login from \"./Login\";\nimport {connect} from \"react-redux\";\nimport {ThunkDispatch} from \"redux-thunk\";\nimport {LoginDataRequestType, loginMeTC, ToggleErrorAC, toggleErrorAC} from \"../../Redux/authReducer\";\nimport {StateType} from \"../../Redux/redux-store\";\nimport {compose} from \"redux\";\n\ntype LoginContainerType = MapDispatchToPropsType & MapStateToProps\nconst LoginContainer = (props:LoginContainerType) => {\n\n    return <Login {...props}  />\n}\n\n\ntype MapDispatchToPropsType = {\n    login:(loginData:LoginDataRequestType) => void\n    toggleError:(stateError:boolean)=>void\n}\nconst mapDispatchToProps = (dispatch:ThunkDispatch<StateType, {},ToggleErrorAC >):MapDispatchToPropsType => {\n  return {\n      login(loginData:LoginDataRequestType){\n            dispatch(loginMeTC(loginData))\n      },\n      toggleError(stateError:boolean){\n            dispatch(toggleErrorAC(stateError))\n      }\n  }\n}\ntype MapStateToProps = {\n    id:number | null\n    isFetching:boolean\n    isAuth:boolean\n    authError:boolean\n}\nconst mapStateToProps = (state:StateType):MapStateToProps => {\n  return{\n      authError: state.auth.authError,\n      id:state.auth.id,\n      isFetching: state.auth.isFetching,\n      isAuth: state.auth.isAuth\n  }\n}\n\n\n\nexport default compose(\n    connect<MapStateToProps,MapDispatchToPropsType,{},StateType>(mapStateToProps,mapDispatchToProps),\n)(LoginContainer)\n\n\n","import {authMeTC} from \"./authReducer\";\nimport {ThunkDispatch} from \"redux-thunk\";\nimport {StateType} from \"./redux-store\";\n\nconst SET_INITIALIZED = 'SET_INITIALIZED'\n\n\ntype AppReducerType = {\n    isInitialized:boolean\n}\nconst initialState:AppReducerType = {\n    isInitialized:false\n}\ntype ActionType = SetInitializedACType\n\nexport const appReducer = (state = initialState,action:ActionType):AppReducerType => {\n    switch (action.type){\n        case SET_INITIALIZED:\n            return {\n                ...state,\n                isInitialized:true\n            }\n        default:\n            return state\n    }\n}\n\ntype SetInitializedACType = {type:typeof SET_INITIALIZED}\nconst setInitilaizeAC = ():SetInitializedACType => {\n  return{\n      type:SET_INITIALIZED\n  }\n}\n\nexport const setInitializeTC = () => {\n  return (dispatch:ThunkDispatch<StateType, unknown , SetInitializedACType>) => {\n      let promise =  dispatch(authMeTC())\n      Promise.all([promise])\n          .then(()=>{\n              dispatch(setInitilaizeAC())\n          })\n  }\n}\n\n","import React from 'react';\nimport './scss/App.scss';\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport NavigationContainer from \"./components/Navigation/Navigation\";\nimport {HashRouter, Route, Routes} from \"react-router-dom\";\nimport MessagesContainer from \"./components/Content/Messages/MessagesContainer\";\nimport Friends from \"./components/Content/Friends/Friends\";\nimport ProfileContainer from \"./components/Content/Profile/ProfileContainer\";\nimport LoginContainer from \"./components/Content/Login/LoginContainer\";\nimport {compose} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {ThunkDispatch} from \"redux-thunk\";\nimport {setInitializeTC} from \"./components/Redux/appReducer\";\nimport {StateType} from \"./components/Redux/redux-store\";\nimport Preloader from \"./components/Preloader/Preloader\";\n\ntype AppPropsType = MapDispatchToPropsType & MapStateToPropsType\n\nclass App extends React.Component<AppPropsType, {}> {\n    componentDidMount() {\n        this.props.checkInitialize()\n    }\n\n    render() {\n        return (\n            <>\n                {!this.props.isInitialized\n                    ? <Preloader/>\n                    :<div className={'app-wrapper'}>\n                        <HeaderContainer/>\n                        <NavigationContainer/>\n                        <div className={'app-wrapper__content'}>\n                            <Routes>\n                                <Route path={\"/\"} element={<Friends/>}/>\n                                <Route path={\"/profile/:userId\"} element={<ProfileContainer/>}/>\n                                <Route path={\"/messages/*\"} element={<MessagesContainer/>}/>\n                                <Route path={\"/friends/\"} element={<Friends/>}/>\n                                {/*<Route path={\"/news/*\"} element={<News />}/>*/}\n                                <Route path={\"/login/*\"} element={<LoginContainer/>}/>\n                            </Routes>\n                        </div>\n                        <div className={'footer'}></div>\n                    </div>\n                }\n\n            </>\n        );\n    }\n}\n\n\ntype MapDispatchToPropsType = {\n    checkInitialize: () => void\n}\nlet mapDispatchToProps = (dispatch: ThunkDispatch<any, any, any>): MapDispatchToPropsType => {\n    return {\n        checkInitialize: () => {\n            dispatch(setInitializeTC())\n        }\n    }\n}\n\n\ntype MapStateToPropsType = {\n    isInitialized: boolean\n    isAuth:boolean\n}\nlet mapStateToProps = (state: StateType): MapStateToPropsType => {\n    return {\n        isInitialized: state.app.isInitialized,\n        isAuth: state.auth.isAuth\n    }\n}\n\n\nexport default compose(\n    connect(mapStateToProps, mapDispatchToProps)\n)(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport profileReducer from \"./profileReducer\";\nimport messagesReducer from \"./messagesReducer\";\nimport friendsReducer from \"./friendsReducer\";\nimport authReducer from \"./authReducer\";\nimport thunkMiddle from \"redux-thunk\";\nimport {appReducer} from \"./appReducer\";\n\n\n\n\n\nlet bigReducer = combineReducers({\n    profilePage: profileReducer,\n    messagesPage: messagesReducer,\n    friendsPage: friendsReducer,\n    auth:authReducer,\n    app:appReducer\n});\n\nexport type StateType = ReturnType<typeof bigReducer>\n\n\nexport let store = createStore(bigReducer,applyMiddleware(thunkMiddle))\n\n\n\n","import React from 'react';\nimport './index.scss';\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport {store} from \"./components/Redux/redux-store\";\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\n\n\nReactDOM.render(\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>,\n        document.getElementById('root')\n    );\n    reportWebVitals();\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"sourceRoot":""}